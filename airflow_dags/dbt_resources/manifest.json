{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v3.json", "dbt_version": "0.21.0", "generated_at": "2022-11-09T10:34:03.422773Z", "invocation_id": "8e7f1609-00d9-4923-9cd8-d9017fa1ebae", "env": {}, "project_id": "ecd853c78bf31da718ce6a290d4a2c79", "user_id": "db0c6231-123a-4e9a-bae6-2bc597a3789a", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.kiwi_dbt.promotion_rep": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key = ['PROMOTION_CD'],\n        tags=['KIWI_BDV'],\n        schema='ADW_BDV', \n    )\n}}\n\n\n\n\nSELECT PROMOTION_CD, \n       PROMOTION_NAME, \n       TECHNICAL_METADATA\n  FROM {{ref('raw_osts_promo_data_v')}} raw_osts_promo_data_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_promo_data_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_BDV", "database": null, "tags": ["KIWI_BDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "unique_key": ["PROMOTION_CD"], "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_BDV", "fqn": ["kiwi_dbt", "KIWI", "BDV", "promotion_rep"], "unique_id": "model.kiwi_dbt.promotion_rep", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\BDV\\promotion_rep.sql", "original_file_path": "models\\KIWI\\BDV\\promotion_rep.sql", "name": "promotion_rep", "alias": "promotion_rep", "checksum": {"name": "sha256", "checksum": "0606c6f1fd70a4a7ad74891699678d9f8d680047719ba1cff03fa7584bdf1131"}, "tags": ["KIWI_BDV"], "refs": [["raw_osts_promo_data_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "unique_key": ["PROMOTION_CD"], "tags": ["KIWI_BDV"], "schema": "ADW_BDV"}, "created_at": 1667990043}, "model.kiwi_dbt.sale_transaction_item_base_br": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_BDV'],\n        schema='ADW_BDV', \n    )\n}}\n\n\n\n\n\nSELECT STORE_NK1\n\t    ,STORE_NK2\n\t\t,STORE_NK3\n\t\t,TRANSACTION_ID\n\t\t,ITEM_SEQUENCE_NUMBER\n\t\t,ITEM_NK1\n\t\t,ITEM_NK2\n\t\t,ITEM_NK3\n\t\t,EAN_NK1\n\t\t,EAN_NK2\n\t\t,EAN_NK3\n\t\t,ITEM_QUANTITY\n\t\t,UOM_NK1\n\t\t,UOM_NK2\n\t\t,UOM_NK3\n\t\t,POS_BASE_UNIT_PRICE_AMOUNT\n\t\t,ACTUAL_UNIT_PRICE_AMOUNT\n\t\t,EXTENDED_PRICE_AMOUNT\n\t\t,EXTENDED_DISCOUNT_AMOUNT\n\t\t,ITEM_TYPE\n\t\t,TRANSACTION_END_TS\n\t\t,TRANSACTION_STATUS\n\t\t,BASE_UNIT_PRICE_AMOUNT\n\t\t,PRIMARY_ENTITY_ID\n\t\t,PURCHASE_TRANSACTION_STORE_NK1\n\t\t,PURCHASE_TRANSACTION_STORE_NK2\n\t\t,PURCHASE_TRANSACTION_STORE_NK3\n\t\t,PURCHASE_TRANSACTION_SOURCE_ID\n\t\t,PURCHASE_TRANSACTION_END_TS\n\t\t,TECHNICAL_METADATA\n  FROM {{ ref('sale_transaction_item_base_br_v') }}  sale_transaction_item_base_br_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.sale_transaction_item_base_br_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_BDV", "database": null, "tags": ["KIWI_BDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_BDV", "fqn": ["kiwi_dbt", "KIWI", "BDV", "sale_transaction_item_base_br"], "unique_id": "model.kiwi_dbt.sale_transaction_item_base_br", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\BDV\\sale_transaction_item_base_br.sql", "original_file_path": "models\\KIWI\\BDV\\sale_transaction_item_base_br.sql", "name": "sale_transaction_item_base_br", "alias": "sale_transaction_item_base_br", "checksum": {"name": "sha256", "checksum": "fe748d1522425c572c0220c4d872dd40f6403d59d923ce605df1815b7f5fa29b"}, "tags": ["KIWI_BDV"], "refs": [["sale_transaction_item_base_br_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_BDV"], "schema": "ADW_BDV"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_item_discount_br": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_BDV'],\n        schema='ADW_BDV', \n    )\n}}\n\n\n\nSELECT STORE_NK1, \n       STORE_NK2, \n       STORE_NK3, \n       TRANSACTION_ID, \n       TRANSACTION_END_TS, \n       TRANSACTION_STATUS, \n       ITEM_SEQUENCE_NUMBER,\n       ITEM_NK1, \n       ITEM_NK2, \n       ITEM_NK3, \n       DISCOUNT_SEQUENCE_NUMBER, \n       DISCOUNT_TYPE, \n       DISCOUNT_UNIT_AMOUNT,\n       DISCOUNTED_UNIT_PRICE_AMOUNT, \n       PROMOTION_ID, \n       PRIMARY_ENTITY_ID, \n       TECHNICAL_METADATA\nFROM {{ ref('sale_transaction_item_discount_br_v') }} sale_transaction_item_discount_br_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.sale_transaction_item_discount_br_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_BDV", "database": null, "tags": ["KIWI_BDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_BDV", "fqn": ["kiwi_dbt", "KIWI", "BDV", "sale_transaction_item_discount_br"], "unique_id": "model.kiwi_dbt.sale_transaction_item_discount_br", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\BDV\\sale_transaction_item_discount_br.sql", "original_file_path": "models\\KIWI\\BDV\\sale_transaction_item_discount_br.sql", "name": "sale_transaction_item_discount_br", "alias": "sale_transaction_item_discount_br", "checksum": {"name": "sha256", "checksum": "1402bfa1985734140a346d35f9e0234f62b0b8d39668998d82afd890f519d452"}, "tags": ["KIWI_BDV"], "refs": [["sale_transaction_item_discount_br_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_BDV"], "schema": "ADW_BDV"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_payment_br": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_BDV'],\n        schema='ADW_BDV', \n    )\n}}\n\nSELECT STORE_NK1, \n       STORE_NK2, \n\t   STORE_NK3, \n\t   TRANSACTION_ID, \n\t   PAYMENT_SEQUENCE_NUMBER,\n\t   TRANSACTION_END_TS, \n\t   TRANSACTION_STATUS, \n\t   CURRENCY_NK1, \n\t   CURRENCY_NK2,\n\t   CURRENCY_NK3, \n\t   TENDER_TYPE_ID, \n\t   FACE_AMOUNT, \n\t   TENDER_AMOUNT, \n\t   TENDER_CHANGE_AMOUNT,\n\t   PAYMENT_SERVICE_PROVIDER, \n\t   PRIMARY_ENTITY_ID, \n\t   TECHNICAL_METADATA, \n\t   PROMOTION_ID,\n\t   COUPON_NK1, \n\t   FACE_AMOUNT_CURRENCY_NK1, \n\t   TENDER_CHANGE_CURRENCY_NK1\n  FROM {{ ref('sale_transaction_payment_br_v') }} sale_transaction_payment_br_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.sale_transaction_payment_br_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_BDV", "database": null, "tags": ["KIWI_BDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_BDV", "fqn": ["kiwi_dbt", "KIWI", "BDV", "sale_transaction_payment_br"], "unique_id": "model.kiwi_dbt.sale_transaction_payment_br", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\BDV\\sale_transaction_payment_br.sql", "original_file_path": "models\\KIWI\\BDV\\sale_transaction_payment_br.sql", "name": "sale_transaction_payment_br", "alias": "sale_transaction_payment_br", "checksum": {"name": "sha256", "checksum": "908ae4a7d5d1b00878cb9f491213b4956e540f46de30a3c383c4f229f9566a73"}, "tags": ["KIWI_BDV"], "refs": [["sale_transaction_payment_br_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_BDV"], "schema": "ADW_BDV"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_tender_reward_br": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_BDV'],\n        schema='ADW_BDV', \n    )\n}}\n\nSELECT STORE_NK1, \n       TRANSACTION_ID, \n       ITEM_SEQUENCE_NUMBER, \n       TENDER_REWARD_SEQUENCE_NUMBER , \n       TRANSACTION_END_TS , \n       TRADING_ENTITY_CD,\n       ITEM_NK1, \n       PROMOTION_TENDER_REWARD_TYPE, \n       PROMOTION_ID, \n       COUPON_NK1, \n       REWARD_AMOUNT, \n       REWARD_TYPE, \n       TECHNICAL_METADATA\n  FROM {{ref('sale_transaction_tender_reward_br_v')}} sale_transaction_tender_reward_br_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.sale_transaction_tender_reward_br_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_BDV", "database": null, "tags": ["KIWI_BDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_BDV", "fqn": ["kiwi_dbt", "KIWI", "BDV", "sale_transaction_tender_reward_br"], "unique_id": "model.kiwi_dbt.sale_transaction_tender_reward_br", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\BDV\\sale_transaction_tender_reward_br.sql", "original_file_path": "models\\KIWI\\BDV\\sale_transaction_tender_reward_br.sql", "name": "sale_transaction_tender_reward_br", "alias": "sale_transaction_tender_reward_br", "checksum": {"name": "sha256", "checksum": "f1b9b86edc048dff717df5e814dd915e66d982b02dfb73fa31904f5a92c0761c"}, "tags": ["KIWI_BDV"], "refs": [["sale_transaction_tender_reward_br_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_BDV"], "schema": "ADW_BDV"}, "created_at": 1667990044}, "model.kiwi_dbt.dim_promotion": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_PL'],\n        schema='ADW_SALES_PL', \n    )\n}}\n\n\n\nSELECT PROMOTION_CD, \n       PROMOTION_NAME, \n       TECHNICAL_METADATA\n  FROM {{ref('dim_promotion_v')}} dim_promotion_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.dim_promotion_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_PL", "database": null, "tags": ["KIWI_PL"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_PL", "fqn": ["kiwi_dbt", "KIWI", "PL", "dim_promotion"], "unique_id": "model.kiwi_dbt.dim_promotion", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\PL\\dim_promotion.sql", "original_file_path": "models\\KIWI\\PL\\dim_promotion.sql", "name": "dim_promotion", "alias": "dim_promotion", "checksum": {"name": "sha256", "checksum": "8b2e2a5097ba2e5c08c5cbfc435a8f9994587ba20bf9ec9f3629d6d25a688f8c"}, "tags": ["KIWI_PL"], "refs": [["dim_promotion_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_PL"], "schema": "ADW_SALES_PL"}, "created_at": 1667990044}, "model.kiwi_dbt.dim_tender_reward_type": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_PL'],\n        schema='ADW_SALES_PL', \n    )\n}}\n\nSELECT TENDER_REWARD_TYPE_CD, \n       TENDER_REWARD_TYPE_NAME, \n       TECHNICAL_METADATA\n FROM {{ref('dim_tender_reward_type_v')}} dim_tender_reward_type_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.dim_tender_reward_type_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_PL", "database": null, "tags": ["KIWI_PL"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_PL", "fqn": ["kiwi_dbt", "KIWI", "PL", "dim_tender_reward_type"], "unique_id": "model.kiwi_dbt.dim_tender_reward_type", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\PL\\dim_tender_reward_type.sql", "original_file_path": "models\\KIWI\\PL\\dim_tender_reward_type.sql", "name": "dim_tender_reward_type", "alias": "dim_tender_reward_type", "checksum": {"name": "sha256", "checksum": "8282ac653c06c25a0c9118a15910a6e252e2d6fc0356ef9bb7e1bde471c7d692"}, "tags": ["KIWI_PL"], "refs": [["dim_tender_reward_type_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_PL"], "schema": "ADW_SALES_PL"}, "created_at": 1667990044}, "model.kiwi_dbt.dim_tender_type": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_PL'],\n        schema='ADW_SALES_PL',\n    )\n}}\n\nSELECT TENDER_TYPE_CD, \n       TENDER_TYPE_NAME, \n       TECHNICAL_METADATA\n  FROM {{ref('dim_tender_type_v')}} dim_tender_type_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.dim_tender_type_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_PL", "database": null, "tags": ["KIWI_PL"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_PL", "fqn": ["kiwi_dbt", "KIWI", "PL", "dim_tender_type"], "unique_id": "model.kiwi_dbt.dim_tender_type", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\PL\\dim_tender_type.sql", "original_file_path": "models\\KIWI\\PL\\dim_tender_type.sql", "name": "dim_tender_type", "alias": "dim_tender_type", "checksum": {"name": "sha256", "checksum": "a47c499ca6ca956d7f8ec4b33e2450d12c8db439ebb0ad024d23d112799fc0d4"}, "tags": ["KIWI_PL"], "refs": [["dim_tender_type_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_PL"], "schema": "ADW_SALES_PL"}, "created_at": 1667990044}, "model.kiwi_dbt.fact_sale_transaction_item_tender_reward": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_PL'],\n        schema='ADW_SALES_PL', \n    )\n}}\n\n\nSELECT STORE_CD, \n       TRANSACTION_ID, \n       ITEM_SEQUENCE_NUM, \n       TENDER_REWARD_SEQUENCE_NUM , \n       OPERATING_COMPANY_CD, \n       ITEM_CD , \n       TENDER_REWARD_TYPE_CD,\n       PROMOTION_CD, \n       COUPON_CD, \n       TRANSACTION_DT, \n       REWARD_AMT, \n       REWARD_TYPE, \n       TECHNICAL_METADATA\n FROM {{ref('fact_sale_transaction_item_tender_reward_v')}} fact_sale_transaction_item_tender_reward_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.fact_sale_transaction_item_tender_reward_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_PL", "database": null, "tags": ["KIWI_PL"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_PL", "fqn": ["kiwi_dbt", "KIWI", "PL", "fact_sale_transaction_item_tender_reward"], "unique_id": "model.kiwi_dbt.fact_sale_transaction_item_tender_reward", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\PL\\fact_sale_transaction_item_tender_reward.sql", "original_file_path": "models\\KIWI\\PL\\fact_sale_transaction_item_tender_reward.sql", "name": "fact_sale_transaction_item_tender_reward", "alias": "fact_sale_transaction_item_tender_reward", "checksum": {"name": "sha256", "checksum": "88bc925f4b8e7004f60f41ccbdc8b4932c32b340296762cf5cefe2735de9ac4e"}, "tags": ["KIWI_PL"], "refs": [["fact_sale_transaction_item_tender_reward_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_PL"], "schema": "ADW_SALES_PL"}, "created_at": 1667990044}, "model.kiwi_dbt.fact_sale_transaction_tender": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_PL'],\n        schema='ADW_SALES_PL', \n    )\n}}\n\n \nSELECT STORE_CD, \n       TRANSACTION_ID, \n       TENDER_SEQUENCE_NUM, \n       OPERATING_COMPANY_CD, \n       TENDER_TYPE_CD, \n       PROMOTION_CD,\n       COUPON_CD, \n       TRANSACTION_DT, \n       PAYMENT_SERVICE_PROVIDER_CD, \n       FACE_AMT, \n       FACE_CURRENCY_CD, \n       TENDER_AMT, \n       TENDER_CURRENCY_CD,\n       CHANGE_AMT,\n       CHANGE_CURRENCY_CD, \n       TECHNICAL_METADATA\n FROM {{ref('fact_sale_transaction_tender_v')}} fact_sale_transaction_tender_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.fact_sale_transaction_tender_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_PL", "database": null, "tags": ["KIWI_PL"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_PL", "fqn": ["kiwi_dbt", "KIWI", "PL", "fact_sale_transaction_tender"], "unique_id": "model.kiwi_dbt.fact_sale_transaction_tender", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\PL\\fact_sale_transaction_tender.sql", "original_file_path": "models\\KIWI\\PL\\fact_sale_transaction_tender.sql", "name": "fact_sale_transaction_tender", "alias": "fact_sale_transaction_tender", "checksum": {"name": "sha256", "checksum": "3cd0d791764b6466e4d75230c8c2d986710847f49671165ca43bc6ac8753929e"}, "tags": ["KIWI_PL"], "refs": [["fact_sale_transaction_tender_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_PL"], "schema": "ADW_SALES_PL"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_coupon_stssls_link": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_RDV', \n    )\n}}\n\n\n\n\nSELECT \n       STORE_NK1, \n\t   STORE_NK2, \n\t   STORE_NK3, \n\t   TRANSACTION_ID, \n\t   TRANSACTION_END_TS,\n\t   BARCODE, \n\t   PROMOTION_ID, \n\t   PROMOTION_DESCRIPTION, \n\t   REWARD_VALUE, \n\t   REWARD_TYPE,\n\t   THRESHOLD,\n\t   SOURCE_SYSTEM_CD, \n\t   REASON_CD, \n\t   TECHNICAL_METADATA\n FROM  {{ ref('raw_osts_trans_coupon_link_v') }}  raw_osts_trans_coupon_link_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans_coupon_link_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_RDV", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_RDV", "fqn": ["kiwi_dbt", "KIWI", "RDV", "sale_transaction_coupon_stssls_link"], "unique_id": "model.kiwi_dbt.sale_transaction_coupon_stssls_link", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\RDV\\sale_transaction_coupon_stssls_link.sql", "original_file_path": "models\\KIWI\\RDV\\sale_transaction_coupon_stssls_link.sql", "name": "sale_transaction_coupon_stssls_link", "alias": "sale_transaction_coupon_stssls_link", "checksum": {"name": "sha256", "checksum": "ea0b0d84a212cee385ed9c90601630c86ecaa9ed51dfbd07904da0dbf493e782"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans_coupon_link_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_RDV"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_header_stssls_link": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_RDV', \n    )\n}}\n\n\n\n\nSELECT  STORE_NK1, \n        STORE_NK2, \n\t\tSTORE_NK3, \n\t\tTRANSACTION_ID,\n\t\tTRANSACTION_END_TS, \n\t\tTRANSACTION_PROVIDER_NAME, \n\t\tSOURCE_SYSTEM_CD,\n\t\tREASON_CD, \n\t\tTRANSACTION_STATUS, \n\t\tPRIMARY_ENTITY_ID, \n\t\tGROSS_AMOUNT,\n\t\tNET_AMOUNT, \n\t\tTOTAL_SAVINGS_AMOUNT, \n\t\tPURCHASE_QUANTITY, \n\t\tSALES_CHANNEL_NAME,\n\t\tORDER_NUMBER, \n\t\tTECHNICAL_METADATA, \n\t\tR10_TRANSACTION_ID, \n\t\tASPIRE_ARRIVAL_TS\n FROM {{ ref('raw_osts_trans_header_v') }}  raw_osts_trans_header", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans_header_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_RDV", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_RDV", "fqn": ["kiwi_dbt", "KIWI", "RDV", "sale_transaction_header_stssls_link"], "unique_id": "model.kiwi_dbt.sale_transaction_header_stssls_link", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\RDV\\sale_transaction_header_stssls_link.sql", "original_file_path": "models\\KIWI\\RDV\\sale_transaction_header_stssls_link.sql", "name": "sale_transaction_header_stssls_link", "alias": "sale_transaction_header_stssls_link", "checksum": {"name": "sha256", "checksum": "0e4303cd36040d8c6fe76fbff157b927974f6dd41b57ade8c334fcff5d3e2828"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans_header_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_RDV"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_item_price_modifier_stssls_link": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_RDV', \n    )\n}}\n\n\n\nSELECT STORE_NK1, \n       STORE_NK2, \n       STORE_NK3, \n       TRANSACTION_ID, \n       ITEM_SEQUENCE_NUMBER,\n\t   MODIFIER_SEQUENCE_NUMBER, \n       MODIFIER_TYPE, \n       MODIFIER_REASON_CODE,\n\t   MODIFIER_ACTION, \n       MODIFIER_AMOUNT, \n       PROMOTION_ID, \n       PROMOTION_DESCRIPTION,\n\t   PREVIOUS_PRICE_AMOUNT, \n       APPORTIONED_AMOUNT, \n       PROMOTION_PARTICIPATOR,\n\t   ITEM_NK1, \n       ITEM_NK2, \n       ITEM_NK3, \n       TRANSACTION_END_TS, \n       SOURCE_SYSTEM_CD,\n\t   REASON_CD, \n       TECHNICAL_METADATA\n  FROM {{ ref('sale_transaction_item_price_modifier_stssls_link_v') }} sale_transaction_item_price_modifier_stssls_link_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.sale_transaction_item_price_modifier_stssls_link_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_RDV", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_RDV", "fqn": ["kiwi_dbt", "KIWI", "RDV", "sale_transaction_item_price_modifier_stssls_link"], "unique_id": "model.kiwi_dbt.sale_transaction_item_price_modifier_stssls_link", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\RDV\\sale_transaction_item_price_modifier_stssls_link.sql", "original_file_path": "models\\KIWI\\RDV\\sale_transaction_item_price_modifier_stssls_link.sql", "name": "sale_transaction_item_price_modifier_stssls_link", "alias": "sale_transaction_item_price_modifier_stssls_link", "checksum": {"name": "sha256", "checksum": "6395fe49574c8f31adb1f6354355139ac3bb3c10f45538f1f7932b7152fb85fa"}, "tags": ["KIWI_RDV"], "refs": [["sale_transaction_item_price_modifier_stssls_link_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_RDV"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_item_stssls_link": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_RDV', \n    )\n}}\n\n\n\nSELECT STORE_NK1, \n       STORE_NK2, \n\t   STORE_NK3, \n\t   TRANSACTION_ID, \n\t   ITEM_SEQUENCE_NUMBER,\n\t   ITEM_NK1, \n\t   ITEM_NK2, \n\t   ITEM_NK3, \n\t   EAN_NK1, \n\t   EAN_NK2, \n\t   EAN_NK3, \n\t   ITEM_QUANTITY,\n\t   UOM_NK1, \n\t   UOM_NK2, \n\t   UOM_NK3, \n\t   REGULAR_UNIT_PRICE_AMOUNT, \n\t   ACTUAL_UNIT_PRICE_AMOUNT,\n\t   EXTENDED_PRICE_AMOUNT, \n\t   EXTENDED_DISCOUNT_AMOUNT, \n\t   ITEM_TYPE,\n\t   SOURCE_SYSTEM_CD, \n\t   REASON_CD, \n\t   TECHNICAL_METADATA\n FROM {{ ref('sale_transaction_item_stssls_link_v') }}  sale_transaction_item_stssls_link_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.sale_transaction_item_stssls_link_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_RDV", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_RDV", "fqn": ["kiwi_dbt", "KIWI", "RDV", "sale_transaction_item_stssls_link"], "unique_id": "model.kiwi_dbt.sale_transaction_item_stssls_link", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\RDV\\sale_transaction_item_stssls_link.sql", "original_file_path": "models\\KIWI\\RDV\\sale_transaction_item_stssls_link.sql", "name": "sale_transaction_item_stssls_link", "alias": "sale_transaction_item_stssls_link", "checksum": {"name": "sha256", "checksum": "464411918d1da53b3fdc0bc969d915a32d377aa21e48363358da353d8f09cd4a"}, "tags": ["KIWI_RDV"], "refs": [["sale_transaction_item_stssls_link_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_RDV"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_link_stssls_link": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_RDV', \n    )\n}}\n\n\n  SELECT STORE_NK1\n\t\t,STORE_NK2\n\t\t,STORE_NK3\n\t\t,TRANSACTION_ID\n\t\t,TRANSACTION_END_TS\n\t\t,PRIMARY_ENTITY_ID\n\t\t,LINKED_STORE_NK1\n\t\t,LINKED_STORE_NK2\n\t\t,LINKED_STORE_NK3\n\t\t,LINKED_SOURCE_TRANSACTION_ID                \n\t\t,LINKED_TRANSACTION_END_TS\n\t\t,SOURCE_SYSTEM_CD\n\t\t,REASON_CD\n\t\t,TECHNICAL_METADATA\n    FROM {{ref ('sale_transaction_link_stssls_link_v')}} sale_transaction_link_stssls_link_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.sale_transaction_link_stssls_link_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_RDV", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_RDV", "fqn": ["kiwi_dbt", "KIWI", "RDV", "sale_transaction_link_stssls_link"], "unique_id": "model.kiwi_dbt.sale_transaction_link_stssls_link", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\RDV\\sale_transaction_link_stssls_link.sql", "original_file_path": "models\\KIWI\\RDV\\sale_transaction_link_stssls_link.sql", "name": "sale_transaction_link_stssls_link", "alias": "sale_transaction_link_stssls_link", "checksum": {"name": "sha256", "checksum": "91d9e8be87b7ca7eb1cebc57394c3739e7670593b3e6720be87ebbe137a234d5"}, "tags": ["KIWI_RDV"], "refs": [["sale_transaction_link_stssls_link_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_RDV"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_payment_stssls_link": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_RDV', \n    )\n}}\n\nSELECT  STORE_NK1\n\t\t,STORE_NK2\n\t\t,STORE_NK3\n\t\t,TRANSACTION_ID\n\t\t,PAYMENT_SEQUENCE_NUMBER\n\t\t,CURRENCY_NK1\n\t\t,CURRENCY_NK2 \n\t\t,CURRENCY_NK3\n\t\t,TENDER_TYPE_ID\n\t\t,TENDER_AMOUNT\n\t\t,PAYMENT_SERVICE_PROVIDER\n\t\t,TENDER_CHANGE_AMOUNT\n\t\t,FACE_AMOUNT\n\t\t,PROMOTION_NK1\n\t\t,PROMOTION_NK2\n\t\t,PROMOTION_NK3\n\t\t,COUPON_NK1\n\t\t,COUPON_NK2\n\t\t,COUPON_NK3\n\t\t,FACE_AMOUNT_CURRENCY_NK1\n\t\t,FACE_AMOUNT_CURRENCY_NK2\n\t\t,FACE_AMOUNT_CURRENCY_NK3\n\t\t,TENDER_CHANGE_CURRENCY_NK1\n\t\t,TENDER_CHANGE_CURRENCY_NK2\n\t\t,TENDER_CHANGE_CURRENCY_NK3\n\t\t,SOURCE_SYSTEM_CD\n\t\t,REASON_CD\n\t\t,TECHNICAL_METADATA  \n  FROM {{ ref('sale_transaction_payment_stssls_link_v') }}  sale_transaction_payment_stssls_link_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.sale_transaction_payment_stssls_link_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_RDV", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_RDV", "fqn": ["kiwi_dbt", "KIWI", "RDV", "sale_transaction_payment_stssls_link"], "unique_id": "model.kiwi_dbt.sale_transaction_payment_stssls_link", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\RDV\\sale_transaction_payment_stssls_link.sql", "original_file_path": "models\\KIWI\\RDV\\sale_transaction_payment_stssls_link.sql", "name": "sale_transaction_payment_stssls_link", "alias": "sale_transaction_payment_stssls_link", "checksum": {"name": "sha256", "checksum": "d288981c658cdf46eeac35d7bf93a34bb420fed6e1a99b6a182b51ca9c94e2b0"}, "tags": ["KIWI_RDV"], "refs": [["sale_transaction_payment_stssls_link_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_RDV"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_tender_reward_stssls_link": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_RDV', \n    )\n}}\n\n\n\n\n\nSELECT STORE_NK1 \n     , STORE_NK2 \n\t , STORE_NK3\n     , ITEM_NK1\n\t , ITEM_NK2\n\t , ITEM_NK3\n     , PROMOTION_NK1\n\t , PROMOTION_NK2\n\t , PROMOTION_NK3\n     , COUPON_NK1\n\t , COUPON_NK2\n\t , COUPON_NK3\n     , TRANSACTION_ID\n\t , ITEM_SEQUENCE_NUMBER\n\t , TENDER_REWARD_SEQUENCE_NUMBER\n     , TENDER_TYPE_ID\n\t , REWARD_AMOUNT\n\t , REWARD_TYPE\n\t , SOURCE_SYSTEM_CD\n     , REASON_CD \n\t , TECHNICAL_METADATA\n  FROM {{ ref('raw_osts_trans_tender_reward_v') }}  raw_osts_trans_tender_reward_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans_tender_reward_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_RDV", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_RDV", "fqn": ["kiwi_dbt", "KIWI", "RDV", "sale_transaction_tender_reward_stssls_link"], "unique_id": "model.kiwi_dbt.sale_transaction_tender_reward_stssls_link", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\RDV\\sale_transaction_tender_reward_stssls_link.sql", "original_file_path": "models\\KIWI\\RDV\\sale_transaction_tender_reward_stssls_link.sql", "name": "sale_transaction_tender_reward_stssls_link", "alias": "sale_transaction_tender_reward_stssls_link", "checksum": {"name": "sha256", "checksum": "3747aaa4c902c25e4fe187a84265c6daeec4799636f9f375207787b7b68c26cb"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans_tender_reward_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_RDV"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_trans_promotion_hub": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_RDV', \n    )\n}}\n\n\nSELECT PROMOTION_NK1, \n       PROMOTION_NK2, \n       PROMOTION_NK3,\n       HUB_TECHNICAL_METADATA AS TECHNICAL_METADATA\n  FROM  {{ ref('raw_osts_item_promotion_v') }}  raw_osts_item_promotions_v\n WHERE NOT EXISTS (SELECT 1 \n                      FROM ADW_RDV.SALE_TRANS_PROMOTION_HUB DEST\n                     WHERE DEST.PROMOTION_NK1 = raw_osts_item_promotions_v.PROMOTION_NK1)", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_item_promotion_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_RDV", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_RDV", "fqn": ["kiwi_dbt", "KIWI", "RDV", "sale_trans_promotion_hub"], "unique_id": "model.kiwi_dbt.sale_trans_promotion_hub", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\RDV\\sale_trans_promotion_hub.sql", "original_file_path": "models\\KIWI\\RDV\\sale_trans_promotion_hub.sql", "name": "sale_trans_promotion_hub", "alias": "sale_trans_promotion_hub", "checksum": {"name": "sha256", "checksum": "2c1086327d52bde6fe6bd39a81820db217b5b354000bdb71c8bf0db9623517ce"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_item_promotion_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_RDV"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_trans_promotion_stssls_sat": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_RDV', \n    )\n}}\n\n\n\nSELECT PROMOTION_NK1, \n       PROMOTION_NK2, \n       PROMOTION_NK3,\n\t   PROMOTION_NAME,\n\t   LOAD_TS,\n       SAT_TECHNICAL_METADATA AS TECHNICAL_METADATA\n  FROM  {{ ref('raw_osts_item_promotion_v') }}  raw_osts_item_promotions_v\nWHERE NOT EXISTS (SELECT 1 \n                      FROM ADW_RDV.SALE_TRANS_PROMOTION_STSSLS_SAT DEST\n                     WHERE DEST.PROMOTION_NK1 = PROMOTION_NK1)", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_item_promotion_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_RDV", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_RDV", "fqn": ["kiwi_dbt", "KIWI", "RDV", "sale_trans_promotion_stssls_sat"], "unique_id": "model.kiwi_dbt.sale_trans_promotion_stssls_sat", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\RDV\\sale_trans_promotion_stssls_sat.sql", "original_file_path": "models\\KIWI\\RDV\\sale_trans_promotion_stssls_sat.sql", "name": "sale_trans_promotion_stssls_sat", "alias": "sale_trans_promotion_stssls_sat", "checksum": {"name": "sha256", "checksum": "fa05e01a1137e8dbc105e37afd353319ce480a5c75133f143bcbee08ae6901be"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_item_promotion_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_RDV"}, "created_at": 1667990044}, "model.kiwi_dbt.osts_raw_sales_tran_transformed_stage": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_TESTS'],\n        schema='ADW_STAGE', \n    )\n}}\n\nSELECT   SRC.STORE_ID\n\t\t,SRC.TRANSACTION_ID\n\t\t,SRC.TENDERS\n\t\t,SRC.TRANSACTION_END_TS\n\t\t,SRC.TRANSACTION_PROVIDER_NAME\n\t\t,SRC.TRANSACTION_STATUS\n\t\t,SRC.GROSS_AMOUNT\n\t\t,SRC.NET_AMOUNT\n\t\t,SRC.TOTAL_SAVINGS_AMOUNT\n\t\t,SRC.PURCHASE_QUANTITY\n\t\t,SRC.PRIMARY_ENTITY_ID\n\t\t,SRC.R10_TRANSACTION_ID\n\t\t,SRC.ITEMS\n\t\t,SRC.SALES_CHANNEL_NAME\n\t\t,SRC.ORDER_NUMBER\n\t\t,SRC.TRANSACTION_LINKS\n\t\t,SRC.COUPONS\n\t\t,SRC.DQ_AUDIT\n\t\t,SRC.LOAD_TS\n FROM {{ref('raw_osts_trans')}} src\nWHERE NOT EXISTS (SELECT 1 \n                    FROM ADW_STAGE.OSTS_RAW_SALES_TRAN_TRANSFORMED_STAGE DEST\n\t\t\t\t   WHERE DEST.R10_TRANSACTION_ID = SRC.R10_TRANSACTION_ID \n\t\t\t\t     AND DEST.TRANSACTION_ID = SRC.TRANSACTION_ID \n\t\t\t\t\t AND DEST.PRIMARY_ENTITY_ID = SRC.PRIMARY_ENTITY_ID \n\t\t\t\t\t AND DEST.STORE_ID = SRC.STORE_ID)", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_STAGE", "database": null, "tags": ["KIWI_TESTS"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_STAGE", "fqn": ["kiwi_dbt", "KIWI", "STAGE", "osts_raw_sales_tran_transformed_stage"], "unique_id": "model.kiwi_dbt.osts_raw_sales_tran_transformed_stage", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\STAGE\\osts_raw_sales_tran_transformed_stage.sql", "original_file_path": "models\\KIWI\\STAGE\\osts_raw_sales_tran_transformed_stage.sql", "name": "osts_raw_sales_tran_transformed_stage", "alias": "osts_raw_sales_tran_transformed_stage", "checksum": {"name": "sha256", "checksum": "22b54356a533b3fa0ef6decfd8a3d3268f579822950197a552f4130c5be4610d"}, "tags": ["KIWI_TESTS"], "refs": [["raw_osts_trans"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_TESTS"], "schema": "ADW_STAGE"}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_item_price_modifier": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\tpre_hook='TRUNCATE TABLE IF EXISTS {{this}}',\n    )\n}}\n\nSELECT\n\t\t LOAD_TS\n\t\t,STORE_ID\n\t\t,TRANSACTION_ID\n\t\t,TRANSACTION_END_TS\n\t\t,TRANSACTION_STATUS\n\t\t,PRIMARY_ENTITY_ID\n\t\t,ITEM_SEQUENCE_NUMBER\n\t\t,SKU\n\t\t,MODIFIER_SEQUENCE_NUMBER\n\t\t,MODIFIER_TYPE\n\t\t,MODIFIER_REASON_CODE\n\t\t,MODIFIER_ACTION\n\t\t,MODIFIER_AMOUNT\n\t\t,PROMOTION_ID\n\t\t,PROMOTION_DESCRIPTION\n\t\t,PREVIOUS_PRICE_AMOUNT\n\t\t,PROMOTION_PARTICIPATOR\n\t\t,APPORTIONED_AMOUNT\n\t\t,DQ_AUDIT\n\tFROM {{ ref('raw_osts_item_price_modifier_v') }}  raw_osts_item_price_modifier_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_item_price_modifier_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": [{"sql": "TRUNCATE TABLE IF EXISTS {{this}}", "transaction": true, "index": null}]}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_TABLES", "raw_osts_item_price_modifier"], "unique_id": "model.kiwi_dbt.raw_osts_item_price_modifier", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_TABLES\\raw_osts_item_price_modifier.sql", "original_file_path": "models\\KIWI\\TRANSFORM_TABLES\\raw_osts_item_price_modifier.sql", "name": "raw_osts_item_price_modifier", "alias": "raw_osts_item_price_modifier", "checksum": {"name": "sha256", "checksum": "1a13a2dcaafe23df6852235dc43b1c7ad9dd0e3fdbfe788b46ed6ac6c2f67f68"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_item_price_modifier_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN", "pre-hook": ["TRUNCATE TABLE IF EXISTS {{this}}"]}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_item_promo": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\tpre_hook='TRUNCATE TABLE IF EXISTS {{this}}',\n    )\n}}\n\n\tSELECT\n\t\t LOAD_TS\n\t\t,STORE_ID\n\t\t,TRANSACTION_ID\n\t\t,TRANSACTION_END_TS\n\t\t,TRANSACTION_STATUS\n\t\t,PRIMARY_ENTITY_ID\n        ,TRANSACTION_PROVIDER_NAME\n\t\t,ITEM_SEQUENCE_NUMBER\n\t\t,SKU\n\t\t,PROMOTION_ID\n\t\t,PROMOTION_DESCRIPTION\n\t\t,PROMOTION_Type\n\t\t,PROMOTION_Value\n\t\t,DQ_AUDIT\n\tFROM {{ ref('raw_osts_item_promo_v') }} raw_osts_item_promo_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_item_promo_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": [{"sql": "TRUNCATE TABLE IF EXISTS {{this}}", "transaction": true, "index": null}]}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_TABLES", "raw_osts_item_promo"], "unique_id": "model.kiwi_dbt.raw_osts_item_promo", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_TABLES\\raw_osts_item_promo.sql", "original_file_path": "models\\KIWI\\TRANSFORM_TABLES\\raw_osts_item_promo.sql", "name": "raw_osts_item_promo", "alias": "raw_osts_item_promo", "checksum": {"name": "sha256", "checksum": "d4381b276e7ababd39d675467949ddba3d27cab271e5df1ee0d7e244df42225d"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_item_promo_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN", "pre-hook": ["TRUNCATE TABLE IF EXISTS {{this}}"]}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_trans": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV','KIWI_TEST_1'],\n        schema='ADW_SALES_TRAN', \n\t\tpre_hook='TRUNCATE TABLE IF EXISTS {{this}}',\n    )\n}}\n\n\nSELECT\n       LOAD_TS\n      ,STORE_ID\n      ,TRANSACTION_ID\n      ,TENDERS\n      ,TRANSACTION_END_TS\n      ,TRANSACTION_PROVIDER_NAME\n      ,TRANSACTION_STATUS\n      ,GROSS_AMOUNT\n      ,NET_AMOUNT\n      ,TOTAL_SAVINGS_AMOUNT\n      ,PURCHASE_QUANTITY\n      ,PRIMARY_ENTITY_ID\n      ,R10_TRANSACTION_ID\n      ,ITEMS\n \t  ,SALES_CHANNEL_NAME\n \t  ,ORDER_NUMBER\n \t  ,TRANSACTION_LINKS\n \t  ,Coupons\n \t  ,DQ_AUDIT\nFROM  {{ ref('raw_osts_trans_v') }}  raw_osts_trans_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV", "KIWI_TEST_1"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": [{"sql": "TRUNCATE TABLE IF EXISTS {{this}}", "transaction": true, "index": null}]}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_TABLES", "raw_osts_trans"], "unique_id": "model.kiwi_dbt.raw_osts_trans", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_TABLES\\raw_osts_trans.sql", "original_file_path": "models\\KIWI\\TRANSFORM_TABLES\\raw_osts_trans.sql", "name": "raw_osts_trans", "alias": "raw_osts_trans", "checksum": {"name": "sha256", "checksum": "1d9b1c8784c92c99f365a61e71b233199302e0ec9440debf8099378b544141cc"}, "tags": ["KIWI_RDV", "KIWI_TEST_1"], "refs": [["raw_osts_trans_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV", "KIWI_TEST_1"], "schema": "ADW_SALES_TRAN", "pre-hook": ["TRUNCATE TABLE IF EXISTS {{this}}"]}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_trans_coupon": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\tpre_hook='TRUNCATE TABLE IF EXISTS {{this}}',\n    )\n}}\n\n\n        SELECT\n                 LOAD_TS\n                ,STORE_ID\n                ,TRANSACTION_ID\n                ,TRANSACTION_END_TS\n                ,TRANSACTION_STATUS\n                ,PRIMARY_ENTITY_ID\n                ,BARCODE_NUMBER\n                ,PROMOTION_DESCRIPTION\n                ,PROMOTION_ID\n                ,REWARD_TYPE\n                ,THRESHOLD_VALUE\n                ,COUPON_VALUE\n                ,DQ_AUDIT\n        FROM {{ ref('raw_osts_trans_coupon_v') }} raw_osts_trans_coupon_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans_coupon_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": [{"sql": "TRUNCATE TABLE IF EXISTS {{this}}", "transaction": true, "index": null}]}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_TABLES", "raw_osts_trans_coupon"], "unique_id": "model.kiwi_dbt.raw_osts_trans_coupon", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_TABLES\\raw_osts_trans_coupon.sql", "original_file_path": "models\\KIWI\\TRANSFORM_TABLES\\raw_osts_trans_coupon.sql", "name": "raw_osts_trans_coupon", "alias": "raw_osts_trans_coupon", "checksum": {"name": "sha256", "checksum": "95cf8cac632087d96dfc8ac6c7a428da632ddad0efe1ae87105558c355a40f39"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans_coupon_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN", "pre-hook": ["TRUNCATE TABLE IF EXISTS {{this}}"]}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_trans_item": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\tpre_hook='TRUNCATE TABLE IF EXISTS {{this}}',\n    )\n}}\n\n\n\nSELECT\n\t\t LOAD_TS\n\t\t,STORE_ID\n\t\t,TRANSACTION_ID\n\t\t,TRANSACTION_END_TS\n\t\t,TRANSACTION_STATUS\n\t\t,PRIMARY_ENTITY_ID\n\t\t,ITEM_SEQUENCE_NUMBER\n\t\t,SKU\n\t\t,EAN\n\t\t,ITEM_QUANTITY\n\t\t,UNIT_OF_MEASURE\n\t\t,REGULAR_UNIT_PRICE_AMOUNT\n\t\t,ACTUAL_UNIT_PRICE_AMOUNT\n\t\t,EXTENDED_PRICE_AMOUNT\n\t\t,EXTENDED_DISCOUNT_AMOUNT\n\t\t,ITEM_TYPE\n\t\t,DQ_AUDIT\n\tFROM {{ ref('raw_osts_trans_item_v') }}  raw_osts_trans_item_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans_item_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": [{"sql": "TRUNCATE TABLE IF EXISTS {{this}}", "transaction": true, "index": null}]}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_TABLES", "raw_osts_trans_item"], "unique_id": "model.kiwi_dbt.raw_osts_trans_item", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_TABLES\\raw_osts_trans_item.sql", "original_file_path": "models\\KIWI\\TRANSFORM_TABLES\\raw_osts_trans_item.sql", "name": "raw_osts_trans_item", "alias": "raw_osts_trans_item", "checksum": {"name": "sha256", "checksum": "26cd8a237898f2b7e36292b8cc63be43eac21a9fb1fd19737965f94befdba3cc"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans_item_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN", "pre-hook": ["TRUNCATE TABLE IF EXISTS {{this}}"]}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_trans_link": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\tpre_hook='TRUNCATE TABLE IF EXISTS {{this}}',\n    )\n}}\n\n\n\nSELECT\n         LOAD_TS\n        ,STORE_ID\n        ,TRANSACTION_ID\n        ,TRANSACTION_END_TS\n        ,TRANSACTION_STATUS\n        ,PRIMARY_ENTITY_ID\n        ,LINKED_STORE_ID\n        ,LINKED_TRANSACTION_ID\n        ,LINKED_TRANSACTION_END_TS\n        ,LINKED_BUSINESS_DAY_DATE\n        ,DQ_AUDIT\n    FROM {{ ref('raw_osts_trans_link_v') }}  raw_osts_trans_link_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans_link_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": [{"sql": "TRUNCATE TABLE IF EXISTS {{this}}", "transaction": true, "index": null}]}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_TABLES", "raw_osts_trans_link"], "unique_id": "model.kiwi_dbt.raw_osts_trans_link", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_TABLES\\raw_osts_trans_link.sql", "original_file_path": "models\\KIWI\\TRANSFORM_TABLES\\raw_osts_trans_link.sql", "name": "raw_osts_trans_link", "alias": "raw_osts_trans_link", "checksum": {"name": "sha256", "checksum": "d0e02c5feb6e7968f37976b8ae1dab18dbca3d5c22935c1cfe7d115335ebed21"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans_link_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN", "pre-hook": ["TRUNCATE TABLE IF EXISTS {{this}}"]}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_trans_payment": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\tpre_hook='TRUNCATE TABLE IF EXISTS {{this}}',\n    )\n}}\n\n\n\n\n\n\n\n      SELECT LOAD_TS,\n             STORE_ID,\n             TRANSACTION_ID,\n\t         TRANSACTION_END_TS,\n\t         TRANSACTION_STATUS,\n\t         PRIMARY_ENTITY_ID,\n\t         PAYMENT_SEQUENCE_NUMBER,\n\t         CURRENCY,\n\t         TENDER_AMOUNT,\n\t         TENDER_TYPE_ID,\n\t         PAYMENT_SERVICE_PROVIDER,\n\t         TENDER_CHANGE_AMOUNT,\n\t         FACE_AMOUNT,\n\t         PROMOTIONID,\n             FACE_CURRENCY,\n             TENDER_CHANGE_CURRENCY,\n             BARCODE_NUMBER,\n\t         REWARD_TYPE,\n\t\t\t DQ_AUDIT\n        FROM {{ ref('raw_osts_trans_payment_v') }}  raw_osts_trans_payment_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans_payment_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": [{"sql": "TRUNCATE TABLE IF EXISTS {{this}}", "transaction": true, "index": null}]}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_TABLES", "raw_osts_trans_payment"], "unique_id": "model.kiwi_dbt.raw_osts_trans_payment", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_TABLES\\raw_osts_trans_payment.sql", "original_file_path": "models\\KIWI\\TRANSFORM_TABLES\\raw_osts_trans_payment.sql", "name": "raw_osts_trans_payment", "alias": "raw_osts_trans_payment", "checksum": {"name": "sha256", "checksum": "1a7198cd74dd8fc02c8378aadab8b770a908886324b036fe7c5de4b975390f1e"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans_payment_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN", "pre-hook": ["TRUNCATE TABLE IF EXISTS {{this}}"]}, "created_at": 1667990044}, "model.kiwi_dbt.sts_bdv_item_promotion_tender_rewards_tab": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\tpre_hook='TRUNCATE TABLE IF EXISTS {{this}}',\n    )\n}}\n\n\n\nSELECT\n\tTRANSACTION_ID,\n\tTRANSACTION_END_TS,\n\tITEM_SEQUENCE_NUMBER,\n\tITEM_LEVEL_DISCOUNT,\n\tBASKET_LEVEL_DISCOUNT,\n\tSTAFF_DISCOUNT\nFROM {{ref('sts_bdv_item_promotion_tender_rewards_tab_v')}} sts_bdv_item_promotion_tender_rewards_tab_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.sts_bdv_item_promotion_tender_rewards_tab_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": [{"sql": "TRUNCATE TABLE IF EXISTS {{this}}", "transaction": true, "index": null}]}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_TABLES", "sts_bdv_item_promotion_tender_rewards_tab"], "unique_id": "model.kiwi_dbt.sts_bdv_item_promotion_tender_rewards_tab", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_TABLES\\sts_bdv_item_promotion_tender_rewards_tab.sql", "original_file_path": "models\\KIWI\\TRANSFORM_TABLES\\sts_bdv_item_promotion_tender_rewards_tab.sql", "name": "sts_bdv_item_promotion_tender_rewards_tab", "alias": "sts_bdv_item_promotion_tender_rewards_tab", "checksum": {"name": "sha256", "checksum": "645ce8a446acbbd1e08a92d1b231802fa815c4e87c094f991d2d406e62e6054d"}, "tags": ["KIWI_RDV"], "refs": [["sts_bdv_item_promotion_tender_rewards_tab_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN", "pre-hook": ["TRUNCATE TABLE IF EXISTS {{this}}"]}, "created_at": 1667990044}, "model.kiwi_dbt.sts_bdv_sale_transaction_item_br": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\tpre_hook='TRUNCATE TABLE IF EXISTS {{this}}',\n    )\n}}\n\n\n\n\n SELECT\n    STORE_NK1\n    ,STORE_NK2\n    ,STORE_NK3\n    ,TRANSACTION_ID\n    ,TRANSACTION_END_TS\n    ,TRANSACTION_STATUS\n    ,ITEM_SEQUENCE_NUMBER\n    ,ITEM_NK1\n    ,ITEM_NK2\n    ,ITEM_NK3\n    ,EAN_NK1\n    ,EAN_NK2\n    ,EAN_NK3\n    ,ITEM_QUANTITY\n    ,UOM_NK1\n    ,UOM_NK2\n    ,UOM_NK3\n    ,POS_BASE_UNIT_PRICE_AMOUNT\n    ,BASE_UNIT_PRICE_AMOUNT\n    ,BASE_PRICE_STALE_FLAG\n    ,ACTUAL_UNIT_PRICE_AMOUNT\n    ,EXTENDED_PRICE_AMOUNT\n    ,EXTENDED_DISCOUNT_AMOUNT\n    ,ITEM_TYPE\n    ,SALE_EXCLUSION_INDICATOR\n    ,ITEM_PRODUCT_INDICATOR\n    ,ITEM_SERVICE_INDICATOR\n\t,ITEM_CATCHWEIGHT_INDICATOR\n    ,ITEM_CATCHWEIGHT_QUANTITY\n    ,GOODWILL_TYPE\n    ,OTHER_CORPORATE_VOUCHER_GOODWILL_AMOUNT\n    ,GROSS_SALE_BEFORE_DISCOUNTS_AMOUNT\n    ,AUTO_RTC_DISCOUNT_AMOUNT\n    ,CORPORATE_CLEARANCE_DISCOUNT_AMOUNT\n\t,LOCAL_CLEARANCE_DISCOUNT_AMOUNT\n    ,CENTRAL_APPLIED_PROMOTIONAL_DISCOUNT_AMOUNT\n    ,POS_APPLIED_PROMOTIONAL_DISCOUNT_AMOUNT\n    ,STORE_MARKDOWN_MANUAL_DISCOUNT_AMOUNT\n    ,STORE_MARKDOWN_ELECTRONIC_DISCOUNT_AMOUNT\n    ,STORE_MARKDOWN_SYSTEM_DISCOUNT_AMOUNT\n    ,OTHER_CORPORATE_VOUCHER_POSTPRICE_DISCOUNT_AMOUNT\n    ,CENTRAL_MARKDOWN_DISCOUNT_AMOUNT\n    ,PROMOTIONAL_DISCOUNT_AMOUNT\n    ,STORE_MARKDOWN_DISCOUNT_AMOUNT\n    ,MARKETING_NECTAR_PRICE_DISCOUNT_AMOUNT\n    ,MARKETING_ITEM_LEVEL_DISCOUNT_AMOUNT\n    ,MARKETING_BASKET_LEVEL_DISCOUNT_AMOUNT\n    ,STAFF_DISCOUNT_AMOUNT\n    ,OTHER_CORPORATE_VOUCHER_AMOUNT\n    ,PRE_PROMOTIONAL_SALE_AMOUNT\n    ,GROSS_SALE_AMOUNT\n    ,NET_RETAIL_SALES_AMOUNT\n\t,PRIMARY_ENTITY_ID\n    ,TECHNICAL_METADATA\n    ,ITEM_NAME\n    ,BASE_PRICE_USE_INDICATOR\n    ,SELLING_PRICE_AMOUNT\n    ,PURCHASE_TRANSACTION_STORE_NK1\n    ,PURCHASE_TRANSACTION_STORE_NK2\n    ,PURCHASE_TRANSACTION_STORE_NK3\n    ,PURCHASE_TRANSACTION_SOURCE_ID\n    ,PURCHASE_TRANSACTION_END_TS\nfrom {{ref('sts_bdv_sale_transaction_item_br_v')}} sts_bdv_sale_transaction_item_br_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": [{"sql": "TRUNCATE TABLE IF EXISTS {{this}}", "transaction": true, "index": null}]}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_TABLES", "sts_bdv_sale_transaction_item_br"], "unique_id": "model.kiwi_dbt.sts_bdv_sale_transaction_item_br", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_TABLES\\sts_bdv_sale_transaction_item_br.sql", "original_file_path": "models\\KIWI\\TRANSFORM_TABLES\\sts_bdv_sale_transaction_item_br.sql", "name": "sts_bdv_sale_transaction_item_br", "alias": "sts_bdv_sale_transaction_item_br", "checksum": {"name": "sha256", "checksum": "11c8eaeaacc7c354b1963de807571876f5dd2e84152739a0d4c386795c7f0515"}, "tags": ["KIWI_RDV"], "refs": [["sts_bdv_sale_transaction_item_br_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN", "pre-hook": ["TRUNCATE TABLE IF EXISTS {{this}}"]}, "created_at": 1667990044}, "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_base": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\tpre_hook='TRUNCATE TABLE IF EXISTS {{this}}',\n    )\n}}\n\n\n\n\n\nSELECT\n     STORE_NK1\n    ,STORE_NK2\n    ,STORE_NK3\n    ,TRANSACTION_ID\n    ,TRANSACTION_END_TS\n    ,TRANSACTION_STATUS\n    ,ITEM_SEQUENCE_NUMBER\n    ,ITEM_NK1\n    ,ITEM_NK2\n    ,ITEM_NK3\n    ,EAN_NK1\n    ,EAN_NK2\n    ,EAN_NK3\n    ,ITEM_QUANTITY\n    ,UOM_NK1\n    ,UOM_NK2\n    ,UOM_NK3\n    ,POS_BASE_UNIT_PRICE_AMOUNT\n    ,BASE_UNIT_PRICE_AMOUNT\n    ,ACTUAL_UNIT_PRICE_AMOUNT\n    ,EXTENDED_PRICE_AMOUNT\n    ,EXTENDED_DISCOUNT_AMOUNT\n    ,ITEM_TYPE\n    ,GOODWILL_TYPE\n    ,OTHER_CORPORATE_VOUCHER_GOODWILL_AMOUNT\n    ,PRIMARY_ENTITY_ID\n    ,TECHNICAL_METADATA\n    ,PURCHASE_TRANSACTION_STORE_NK1\n    ,PURCHASE_TRANSACTION_STORE_NK2\n    ,PURCHASE_TRANSACTION_STORE_NK3\n    ,PURCHASE_TRANSACTION_SOURCE_ID\n    ,PURCHASE_TRANSACTION_END_TS\n    ,STORE_CD\n    ,VALID_DATE\n FROM {{ref('sts_bdv_sale_transaction_item_br_base_v')}} sts_bdv_sale_transaction_item_br_base_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_base_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": [{"sql": "TRUNCATE TABLE IF EXISTS {{this}}", "transaction": true, "index": null}]}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_TABLES", "sts_bdv_sale_transaction_item_br_base"], "unique_id": "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_base", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_TABLES\\sts_bdv_sale_transaction_item_br_base.sql", "original_file_path": "models\\KIWI\\TRANSFORM_TABLES\\sts_bdv_sale_transaction_item_br_base.sql", "name": "sts_bdv_sale_transaction_item_br_base", "alias": "sts_bdv_sale_transaction_item_br_base", "checksum": {"name": "sha256", "checksum": "72d8aa939739d2e9d6f1486bd1a67041b36809100a4b7688a1f34627b82aaa7a"}, "tags": ["KIWI_RDV"], "refs": [["sts_bdv_sale_transaction_item_br_base_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN", "pre-hook": ["TRUNCATE TABLE IF EXISTS {{this}}"]}, "created_at": 1667990044}, "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_rpm": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\tpre_hook='TRUNCATE TABLE IF EXISTS {{this}}',\n    )\n}}\n\n\n\nSELECT\n    STORE_NK1,\n    TRANSACTION_END_TS,\n    TRANSACTION_ID,\n    ITEM_SEQUENCE_NUMBER,\n    ZERO_PRICE_FLAG,\n    UNIT_MANUAL_DISCOUNT_AMOUNT,\n    UNIT_ELECTRONIC_DISCOUNT_AMOUNT,\n    EXTENDED_SYSTEM_DISCOUNT_AMOUNT,\n    EXTENDED_PROMOTIONAL_DISCOUNT_AMOUNT\nFROM\n     {{ref('sts_bdv_sale_transaction_item_br_rpm_v')}} sts_bdv_sale_transaction_item_br_rpm_v", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_rpm_v"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": [{"sql": "TRUNCATE TABLE IF EXISTS {{this}}", "transaction": true, "index": null}]}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_TABLES", "sts_bdv_sale_transaction_item_br_rpm"], "unique_id": "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_rpm", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_TABLES\\sts_bdv_sale_transaction_item_br_rpm.sql", "original_file_path": "models\\KIWI\\TRANSFORM_TABLES\\sts_bdv_sale_transaction_item_br_rpm.sql", "name": "sts_bdv_sale_transaction_item_br_rpm", "alias": "sts_bdv_sale_transaction_item_br_rpm", "checksum": {"name": "sha256", "checksum": "feeff3c1a1c93a6e6b1b16d69adbd1c811f4347c2f8b2a289858732ad82e1b90"}, "tags": ["KIWI_RDV"], "refs": [["sts_bdv_sale_transaction_item_br_rpm_v"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "incremental", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN", "pre-hook": ["TRUNCATE TABLE IF EXISTS {{this}}"]}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_item_discount_br_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_BDV'],\n        schema='ADW_SALES_TRAN', \n\t\t    \n\t\t\n    )\n}}\n \n\nSELECT SRC.STORE_ID                         AS STORE_NK1\n    ,'~'                                    AS STORE_NK2\n    ,'~'                                    AS STORE_NK3\n    ,SRC.TRANSACTION_ID                     AS TRANSACTION_ID\n    ,SRC.TRANSACTION_END_TS                 AS TRANSACTION_END_TS\n    ,SRC.TRANSACTION_STATUS                 AS TRANSACTION_STATUS\n    ,SRC.ITEM_SEQUENCE_NUMBER               AS ITEM_SEQUENCE_NUMBER\n    ,SRC.SKU                                AS ITEM_NK1\n    ,'~'                                    AS ITEM_NK2\n    ,'~'                                    AS ITEM_NK3\n    ,SRC.MODIFIER_SEQUENCE_NUMBER           AS DISCOUNT_SEQUENCE_NUMBER\n    ,SRC.MODIFIER_TYPE                      AS DISCOUNT_TYPE\n    ,SRC.MODIFIER_AMOUNT                    AS DISCOUNT_UNIT_AMOUNT\n    ,NULL                                   AS DISCOUNTED_UNIT_PRICE_AMOUNT\n    ,SRC.PROMOTION_ID                       AS PROMOTION_ID\n    ,SRC.PRIMARY_ENTITY_ID                  AS PRIMARY_ENTITY_ID\n    ,TO_VARIANT(OBJECT_CONSTRUCT\n         (\n         'LOAD_TS', SRC.LOAD_TS,\n         'BATCH_ID', {{ var('kiwi_current_load_time')}},\n         'EFFECTIVE_FROM_TS', SRC.TRANSACTION_END_TS,\n         'JOB_NAME', '{{ var('kiwi_job_name')}}',\n         'RECORD_DELETED_FLAG', 'N',\n         'RECORD_ID', MD5(CONCAT(SRC.TRANSACTION_ID, SRC.MODIFIER_SEQUENCE_NUMBER)),\n         'DQ_AUDIT', SRC.DQ_AUDIT\n         )\n    ) AS TECHNICAL_METADATA\n  FROM {{ ref('raw_osts_item_price_modifier') }}  SRC\n WHERE MODIFIER_TYPE = 'Promotion'\n   AND NOT EXISTS (SELECT 1\n                    FROM ADW_BDV.SALE_TRANSACTION_ITEM_DISCOUNT_BR DEST\n                   WHERE DEST.STORE_NK1 = SRC.STORE_ID \n                     AND DEST.TRANSACTION_ID = SRC.TRANSACTION_ID \n                     AND DEST.PRIMARY_ENTITY_ID = SRC.PRIMARY_ENTITY_ID \n                     AND DEST.TRANSACTION_END_TS = SRC.TRANSACTION_END_TS \n                     AND DEST.ITEM_SEQUENCE_NUMBER = SRC.ITEM_SEQUENCE_NUMBER \n                     AND DEST.DISCOUNT_SEQUENCE_NUMBER = SRC.MODIFIER_SEQUENCE_NUMBER\n                   )", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_item_price_modifier"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_BDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "BDV", "sale_transaction_item_discount_br_v"], "unique_id": "model.kiwi_dbt.sale_transaction_item_discount_br_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\BDV\\sale_transaction_item_discount_br_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\BDV\\sale_transaction_item_discount_br_v.sql", "name": "sale_transaction_item_discount_br_v", "alias": "sale_transaction_item_discount_br_v", "checksum": {"name": "sha256", "checksum": "9f63ed92f6ed4be6ae50c3c3f6611cbde23c2a1df7f7e4919020d47fa1a52f8e"}, "tags": ["KIWI_BDV"], "refs": [["raw_osts_item_price_modifier"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_BDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.sts_bdv_item_promotion_tender_rewards_tab_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_BDV'],\n        schema='ADW_SALES_TRAN', \n\t\t    \n\t\t\n    )\n}}\n \n\nSELECT\n\tITEMRWRD.TRANSACTION_ID,\n\tITEMRWRD.TRANSACTION_END_TS,\n\tITEMRWRD.ITEM_SEQUENCE_NUMBER,\n\t--The types of tender reward are: Colleague Discount, Marketing Voucher Product Level, Marketing Voucher Basket Level, Tender, or Complex Promotion.\n\t--For this change we are only interested in a) Marketing Voucher Product Level, b) Marketing Voucher Basket Level and c) Colleague Discount\n\tSUM(DECODE(RWRDTYPE.TENDER_REWARD_TYPE_NAME ,'Marketing Voucher Product Level', ZEROIFNULL(ITEMRWRD.REWARD_AMOUNT), 0) )\tAS ITEM_LEVEL_DISCOUNT,\n\tSUM(DECODE(RWRDTYPE.TENDER_REWARD_TYPE_NAME ,'Marketing Voucher Basket Level', ZEROIFNULL(ITEMRWRD.REWARD_AMOUNT), 0) )\tAS BASKET_LEVEL_DISCOUNT,\n\tSUM(DECODE(RWRDTYPE.TENDER_REWARD_TYPE_NAME ,'Colleague Discount', ZEROIFNULL(ITEMRWRD.REWARD_AMOUNT), 0) )\t\t\tAS STAFF_DISCOUNT\nFROM\n\t{{ref('sale_transaction_tender_reward_br')}}\tITEMRWRD\n\tLEFT OUTER JOIN {{source('ADW_BDV', 'TENDER_REWARD_TYPE_REP')}} \tRWRDTYPE\n\t\tON ITEMRWRD.PROMOTION_TENDER_REWARD_TYPE = RWRDTYPE.TENDER_REWARD_TYPE_NAME\nGROUP BY\n\tITEMRWRD.TRANSACTION_ID,\n\tITEMRWRD.TRANSACTION_END_TS,\n\tITEMRWRD.ITEM_SEQUENCE_NUMBER,\n\tITEMRWRD.PROMOTION_TENDER_REWARD_TYPE", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.kiwi_dbt.ADW_BDV.TENDER_REWARD_TYPE_REP", "model.kiwi_dbt.sale_transaction_tender_reward_br"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_BDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "BDV", "sts_bdv_item_promotion_tender_rewards_tab_v"], "unique_id": "model.kiwi_dbt.sts_bdv_item_promotion_tender_rewards_tab_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\BDV\\sts_bdv_item_promotion_tender_rewards_tab_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\BDV\\sts_bdv_item_promotion_tender_rewards_tab_v.sql", "name": "sts_bdv_item_promotion_tender_rewards_tab_v", "alias": "sts_bdv_item_promotion_tender_rewards_tab_v", "checksum": {"name": "sha256", "checksum": "95cc63ff2f595504d1388ec86046e298dfe7c5478d350ccc69ccd22f19d015e4"}, "tags": ["KIWI_BDV"], "refs": [["sale_transaction_tender_reward_br"]], "sources": [["ADW_BDV", "TENDER_REWARD_TYPE_REP"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_BDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_base_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_BDV'],\n        schema='ADW_SALES_TRAN',     \n    )\n}}\n \n\n\nSELECT\n     TBR.STORE_NK1\n    ,TBR.STORE_NK2\n    ,TBR.STORE_NK3\n    ,TBR.TRANSACTION_ID\n    ,TBR.TRANSACTION_END_TS\n    ,TBR.TRANSACTION_STATUS\n    ,TBR.ITEM_SEQUENCE_NUMBER\n    ,TBR.ITEM_NK1\n    ,TBR.ITEM_NK2\n    ,TBR.ITEM_NK3\n    ,TBR.EAN_NK1\n    ,TBR.EAN_NK2\n    ,TBR.EAN_NK3\n    ,TBR.ITEM_QUANTITY\n    ,TBR.UOM_NK1\n    ,TBR.UOM_NK2\n    ,TBR.UOM_NK3\n    ,ZEROIFNULL(TBR.POS_BASE_UNIT_PRICE_AMOUNT) AS POS_BASE_UNIT_PRICE_AMOUNT\n    ,TBR.BASE_UNIT_PRICE_AMOUNT\n    ,ZEROIFNULL(TBR.ACTUAL_UNIT_PRICE_AMOUNT)   AS ACTUAL_UNIT_PRICE_AMOUNT\n    ,ZEROIFNULL(TBR.EXTENDED_PRICE_AMOUNT)      AS EXTENDED_PRICE_AMOUNT\n    ,ZEROIFNULL(TBR.EXTENDED_DISCOUNT_AMOUNT)   AS EXTENDED_DISCOUNT_AMOUNT\n    ,TBR.ITEM_TYPE\n    ,DECODE(TBR.ITEM_NK1, 7557523 , 'Service', NULL) AS GOODWILL_TYPE\n    ,DECODE(TBR.ITEM_NK1, 7557523 , TBR.EXTENDED_PRICE_AMOUNT, 0) AS OTHER_CORPORATE_VOUCHER_GOODWILL_AMOUNT\n    ,TBR.PRIMARY_ENTITY_ID\n    ,TBR.TECHNICAL_METADATA\n    ,TBR.PURCHASE_TRANSACTION_STORE_NK1\n    ,TBR.PURCHASE_TRANSACTION_STORE_NK2\n    ,TBR.PURCHASE_TRANSACTION_STORE_NK3\n    ,TBR.PURCHASE_TRANSACTION_SOURCE_ID\n    ,TBR.PURCHASE_TRANSACTION_END_TS\n    ,DECODE(TBR.ITEM_TYPE, 'Return', TBR.PURCHASE_TRANSACTION_STORE_NK1, TBR.STORE_NK1) AS STORE_CD\n    ,DECODE(TBR.ITEM_TYPE, 'Return', TBR.PURCHASE_TRANSACTION_END_TS, TBR.TRANSACTION_END_TS ) AS VALID_DATE\nFROM {{ref('sale_transaction_item_base_br')}}  TBR\n\t--WHERE TBR.TRANSACTION_END_TS >= '2021-10-01'\nWHERE TBR.TRANSACTION_END_TS >= '2022-04-01'", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.sale_transaction_item_base_br"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_BDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "BDV", "sts_bdv_sale_transaction_item_br_base_v"], "unique_id": "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_base_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\BDV\\sts_bdv_sale_transaction_item_br_base_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\BDV\\sts_bdv_sale_transaction_item_br_base_v.sql", "name": "sts_bdv_sale_transaction_item_br_base_v", "alias": "sts_bdv_sale_transaction_item_br_base_v", "checksum": {"name": "sha256", "checksum": "bc1e465714c6493603acffee0f06c450de819527552590ce77dcdddbce16c2e8"}, "tags": ["KIWI_BDV"], "refs": [["sale_transaction_item_base_br"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_BDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_rpm_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_BDV'],\n        schema='ADW_SALES_TRAN', \n\t\t    \n\t\t\n    )\n}}\n \n\n\nSELECT\n    STORE_NK1,\n    TRANSACTION_END_TS,\n    TRANSACTION_ID,\n    ITEM_SEQUENCE_NUMBER,\n    SUM(DECODE(MODIFIER_TYPE, 'PriceOverride', DECODE(MODIFIER_REASON_CODE,'ZeroPrice', 1, 0), 0)) AS ZERO_PRICE_FLAG,\n    SUM( CASE\n        WHEN    MODIFIER_TYPE ='PriceOverride'\n            AND MODIFIER_REASON_CODE IS NULL\n            AND MODIFIER_ACTION = 'Replace'\n            AND MODIFIER_AMOUNT < PREVIOUS_PRICE_AMOUNT\n        THEN (PREVIOUS_PRICE_AMOUNT- MODIFIER_AMOUNT)\n        ELSE 0\n        END\n          ) AS UNIT_MANUAL_DISCOUNT_AMOUNT,\n    SUM( CASE\n        WHEN   MODIFIER_TYPE ='PriceOverride'\n            AND MODIFIER_REASON_CODE = 'EmbeddedPrice'\n            AND MODIFIER_ACTION = 'Replace'\n            AND MODIFIER_AMOUNT < PREVIOUS_PRICE_AMOUNT\n        THEN (PREVIOUS_PRICE_AMOUNT- MODIFIER_AMOUNT)\n        ELSE 0\n            END\n          ) AS UNIT_ELECTRONIC_DISCOUNT_AMOUNT,\n    SUM(DECODE(MODIFIER_TYPE, 'Promotion', DECODE(PROMOTION_PARTICIPATOR, 'Store', MODIFIER_AMOUNT, 0), 0)) AS EXTENDED_SYSTEM_DISCOUNT_AMOUNT,\n    SUM(DECODE(MODIFIER_TYPE, 'Promotion', DECODE(PROMOTION_PARTICIPATOR, 'Store', 0, MODIFIER_AMOUNT), 0)) AS EXTENDED_PROMOTIONAL_DISCOUNT_AMOUNT\nFROM\n     {{ref('sale_transaction_item_price_modifier_stssls_link')}} SALE_TRANSACTION_ITEM_PRICE_MODIFIER_STSSLS_LINK \n--WHERE TRANSACTION_END_TS >= '2021-10-01'\nWHERE TRANSACTION_END_TS >= '2022-04-01'\nGROUP BY\n    STORE_NK1, TRANSACTION_END_TS, TRANSACTION_ID, ITEM_SEQUENCE_NUMBER", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.sale_transaction_item_price_modifier_stssls_link"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_BDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "BDV", "sts_bdv_sale_transaction_item_br_rpm_v"], "unique_id": "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_rpm_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\BDV\\sts_bdv_sale_transaction_item_br_rpm_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\BDV\\sts_bdv_sale_transaction_item_br_rpm_v.sql", "name": "sts_bdv_sale_transaction_item_br_rpm_v", "alias": "sts_bdv_sale_transaction_item_br_rpm_v", "checksum": {"name": "sha256", "checksum": "e412df16a8a21126227993b6891e39a67f17cb4086a8d26419d61bad067695fc"}, "tags": ["KIWI_BDV"], "refs": [["sale_transaction_item_price_modifier_stssls_link"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_BDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_BDV'],\n        schema='ADW_SALES_TRAN', \n\t\t    \n\t\t\n    )\n}}\n \n\n\n\n\n SELECT\n    TBR.STORE_NK1\n    ,TBR.STORE_NK2\n    ,TBR.STORE_NK3\n    ,TBR.TRANSACTION_ID\n    ,TBR.TRANSACTION_END_TS\n    ,TBR.TRANSACTION_STATUS\n    ,TBR.ITEM_SEQUENCE_NUMBER\n    ,TBR.ITEM_NK1\n    ,TBR.ITEM_NK2\n    ,TBR.ITEM_NK3\n    ,TBR.EAN_NK1\n    ,TBR.EAN_NK2\n    ,TBR.EAN_NK3\n    ,ZEROIFNULL(TBR.ITEM_QUANTITY) as ITEM_QUANTITY\n    ,TBR.UOM_NK1\n    ,TBR.UOM_NK2\n    ,TBR.UOM_NK3\n    ,TBR.POS_BASE_UNIT_PRICE_AMOUNT\n    ,ZEROIFNULL(PBR.BASE_PRICE_AMT)         AS BASE_UNIT_PRICE_AMOUNT\n    ,CASE\n        WHEN PBR.SELLING_PRICE_AMT IS NOT NULL\n            AND PBR.SELLING_PRICE_TYPE != 'BASE'\n            AND PBR.SELLING_PRICE_AMT != POS_BASE_UNIT_PRICE_AMOUNT\n        THEN 1\n        ELSE 0\n    END AS BASE_PRICE_STALE_FLAG\n    ,TBR.ACTUAL_UNIT_PRICE_AMOUNT\n    ,TBR.EXTENDED_PRICE_AMOUNT\n    ,TBR.EXTENDED_DISCOUNT_AMOUNT\n    ,TBR.ITEM_TYPE\n    ,DECODE(IBR.SUB_CAT_NK1, SREF.SUBCAT_ID , 1, 0) AS SALE_EXCLUSION_INDICATOR\n    ,DECODE(NVL(DIBR.SERVICE_ITEM_FLAG, 'N'), 'N', 1, 0) AS ITEM_PRODUCT_INDICATOR\n    ,DECODE(NVL(DIBR.SERVICE_ITEM_FLAG, 'N'), 'Y', 1, 0) AS ITEM_SERVICE_INDICATOR\n\t,DECODE(NVL(DIBR.CATCHWEIGHT_FLAG, 'N'), 'Y', 1, 0) ITEM_CATCHWEIGHT_INDICATOR\n    ,CASE\n    WHEN ( DIBR.CATCHWEIGHT_FLAG = 'Y' AND ( DECODE(ZEROIFNULL(BASE_PRICE_STALE_FLAG), '1', ZEROIFNULL(POS_BASE_UNIT_PRICE_AMOUNT),\n    DECODE(BASE_UNIT_PRICE_AMOUNT, NULL, ZEROIFNULL(POS_BASE_UNIT_PRICE_AMOUNT),BASE_UNIT_PRICE_AMOUNT)) <> 0 ))\n    THEN ROUND( ( ITEM_QUANTITY * DECODE(ZEROIFNULL(ACTUAL_UNIT_PRICE_AMOUNT), 0, DECODE(BASE_UNIT_PRICE_AMOUNT, NULL,ZEROIFNULL(POS_BASE_UNIT_PRICE_AMOUNT),BASE_UNIT_PRICE_AMOUNT),\n    ZEROIFNULL(ACTUAL_UNIT_PRICE_AMOUNT)) / DECODE(ZEROIFNULL(BASE_PRICE_STALE_FLAG), '1',\n    ZEROIFNULL(POS_BASE_UNIT_PRICE_AMOUNT), DECODE(BASE_UNIT_PRICE_AMOUNT,NULL, ZEROIFNULL(POS_BASE_UNIT_PRICE_AMOUNT),BASE_UNIT_PRICE_AMOUNT)) ), 3 )\n    ELSE ZEROIFNULL(TBR.ITEM_QUANTITY) END AS ITEM_CATCHWEIGHT_QUANTITY\n    ,GOODWILL_TYPE\n    ,OTHER_CORPORATE_VOUCHER_GOODWILL_AMOUNT\n    ,CASE\n        -- IF GOODWILL SERVICE SKU --> 0\n        WHEN TBR.ITEM_NK1 = '7557523'\n            THEN 0\n        WHEN ZEROIFNULL(MSL.ZERO_PRICE_FLAG) = 1\n            THEN DECODE(TBR.ITEM_TYPE, 'Return', -1, 1) * TBR.EXTENDED_PRICE_AMOUNT\n        WHEN ZEROIFNULL(POS_BASE_UNIT_PRICE_AMOUNT) = 0\n        AND ZEROIFNULL(BASE_UNIT_PRICE_AMOUNT) = 0\n            THEN DECODE(TBR.ITEM_TYPE, 'Return', -1, 1) * TBR.EXTENDED_PRICE_AMOUNT\n        ELSE DECODE(BASE_PRICE_STALE_FLAG, 1, POS_BASE_UNIT_PRICE_AMOUNT,\n             DECODE(PBR.BASE_PRICE_AMT, NULL,POS_BASE_UNIT_PRICE_AMOUNT,PBR.BASE_PRICE_AMT)) * DECODE(TBR.ITEM_TYPE, 'Return', -1 * ITEM_CATCHWEIGHT_QUANTITY, ITEM_CATCHWEIGHT_QUANTITY)\n              -- IF GOJI PRICE IS STALE USE POS, OTHERWISE USE GOJI (UNLESS GOJI IS NULL)\n    END AS GROSS_SALE_BEFORE_DISCOUNTS_AMOUNT\n    ,CASE\n        WHEN ( (PBR.SELLING_PRICE_TYPE = 'AUTO RTC') AND (PBR.BASE_PRICE_AMT > POS_BASE_UNIT_PRICE_AMOUNT) )\n            THEN ROUND( ZEROIFNULL(PBR.BASE_PRICE_AMT - POS_BASE_UNIT_PRICE_AMOUNT) * ITEM_CATCHWEIGHT_QUANTITY, 2)\n        ELSE 0\n    END AS AUTO_RTC_DISCOUNT_AMOUNT\n    ,CASE\n        WHEN ( (PBR.SELLING_PRICE_TYPE = 'CORPORATE CLEARANCE') AND (PBR.BASE_PRICE_AMT > POS_BASE_UNIT_PRICE_AMOUNT) )\n            THEN ROUND( ZEROIFNULL(PBR.BASE_PRICE_AMT - POS_BASE_UNIT_PRICE_AMOUNT) * ITEM_CATCHWEIGHT_QUANTITY, 2)\n        ELSE 0\n    END AS CORPORATE_CLEARANCE_DISCOUNT_AMOUNT\n\t,CASE\n\t\tWHEN ( (PBR.SELLING_PRICE_TYPE = 'LOCAL CLEARANCE') AND (PBR.BASE_PRICE_AMT > TBR.POS_BASE_UNIT_PRICE_AMOUNT) )\n\t\tTHEN ROUND( ZEROIFNULL(PBR.BASE_PRICE_AMT - POS_BASE_UNIT_PRICE_AMOUNT ) * ITEM_CATCHWEIGHT_QUANTITY, 2)\n\t    ELSE 0\n     END AS LOCAL_CLEARANCE_DISCOUNT_AMOUNT\n    ,CASE\n        WHEN ( (PBR.SELLING_PRICE_TYPE = 'PROMOTION') AND (PBR.BASE_PRICE_AMT > POS_BASE_UNIT_PRICE_AMOUNT) )\n            THEN ROUND( ZEROIFNULL(PBR.BASE_PRICE_AMT - POS_BASE_UNIT_PRICE_AMOUNT) * ITEM_CATCHWEIGHT_QUANTITY, 2)\n        ELSE 0\n    END AS CENTRAL_APPLIED_PROMOTIONAL_DISCOUNT_AMOUNT\n    ,ZEROIFNULL(DECODE(TBR.ITEM_TYPE, 'Return', -MSL.EXTENDED_PROMOTIONAL_DISCOUNT_AMOUNT, MSL.EXTENDED_PROMOTIONAL_DISCOUNT_AMOUNT)) AS POS_APPLIED_PROMOTIONAL_DISCOUNT_AMOUNT\n    ,CASE\n        WHEN HSL.SALES_CHANNEL_NAME NOT IN ('GroceriesOnline', 'SmartShop', 'ChopChop')\n        AND TBR.ITEM_TYPE <> 'Return'\n            THEN ZEROIFNULL(MSL.UNIT_MANUAL_DISCOUNT_AMOUNT * DECODE(TBR.ITEM_TYPE, 'Return', -1 * TBR.ITEM_QUANTITY, TBR.ITEM_QUANTITY))\n        ELSE 0\n    END AS STORE_MARKDOWN_MANUAL_DISCOUNT_AMOUNT\n    ,CASE\n        WHEN TBR.ITEM_TYPE <> 'Return'\n            THEN ZEROIFNULL(MSL.UNIT_ELECTRONIC_DISCOUNT_AMOUNT * DECODE(TBR.ITEM_TYPE, 'Return', -1 * TBR.ITEM_QUANTITY, TBR.ITEM_QUANTITY))\n        ELSE 0\n    END AS STORE_MARKDOWN_ELECTRONIC_DISCOUNT_AMOUNT\n    ,ZEROIFNULL(DECODE(TBR.ITEM_TYPE, 'Return', -MSL.EXTENDED_SYSTEM_DISCOUNT_AMOUNT, MSL.EXTENDED_SYSTEM_DISCOUNT_AMOUNT)) AS STORE_MARKDOWN_SYSTEM_DISCOUNT_AMOUNT\n    , 0 as OTHER_CORPORATE_VOUCHER_POSTPRICE_DISCOUNT_AMOUNT\n    ,ZEROIFNULL(AUTO_RTC_DISCOUNT_AMOUNT) + ZEROIFNULL(CORPORATE_CLEARANCE_DISCOUNT_AMOUNT) + ZEROIFNULL(LOCAL_CLEARANCE_DISCOUNT_AMOUNT) AS CENTRAL_MARKDOWN_DISCOUNT_AMOUNT\n    ,ZEROIFNULL(CENTRAL_APPLIED_PROMOTIONAL_DISCOUNT_AMOUNT) +  ZEROIFNULL(POS_APPLIED_PROMOTIONAL_DISCOUNT_AMOUNT) AS PROMOTIONAL_DISCOUNT_AMOUNT\n    ,STORE_MARKDOWN_MANUAL_DISCOUNT_AMOUNT + STORE_MARKDOWN_ELECTRONIC_DISCOUNT_AMOUNT + STORE_MARKDOWN_SYSTEM_DISCOUNT_AMOUNT AS STORE_MARKDOWN_DISCOUNT_AMOUNT\n    ,CASE\n        -- when 1) channel is SmartShop and 2) there is a Manual Price Override\n        -- then consider this Marketing Discount Nectar Price and compute accordingly Marketing Discount Nectar Amount\n        -- assume that this applies to Returns too\n        WHEN HSL.SALES_CHANNEL_NAME IN ('SmartShop')\n            THEN ZEROIFNULL(MSL.UNIT_MANUAL_DISCOUNT_AMOUNT * DECODE(TBR.ITEM_TYPE, 'Return', -1 * TBR.ITEM_QUANTITY, TBR.ITEM_QUANTITY))\n        ELSE 0\n    END AS MARKETING_NECTAR_PRICE_DISCOUNT_AMOUNT\n    ,NVL(IPTR.ITEM_LEVEL_DISCOUNT, 0)\t\t\t\t\t\t\tAS MARKETING_ITEM_LEVEL_DISCOUNT_AMOUNT\n    ,NVL(IPTR.BASKET_LEVEL_DISCOUNT, 0)\t\t\t\t\t\t\tAS MARKETING_BASKET_LEVEL_DISCOUNT_AMOUNT\n    ,NVL(IPTR.STAFF_DISCOUNT, 0)\t\t\t\t\t\t\t\tAS STAFF_DISCOUNT_AMOUNT\n    ,OTHER_CORPORATE_VOUCHER_GOODWILL_AMOUNT+OTHER_CORPORATE_VOUCHER_POSTPRICE_DISCOUNT_AMOUNT AS OTHER_CORPORATE_VOUCHER_AMOUNT\n    ,CASE\n\t\t-- IF GOODWILL SERVICE SKU --> 0\n\t\tWHEN TBR.ITEM_NK1 = '7557523'\n\t\t\tTHEN 0\n\t\tELSE \tZEROIFNULL(TBR.EXTENDED_PRICE_AMOUNT)\n\t\t\t- ZEROIFNULL(TBR.EXTENDED_DISCOUNT_AMOUNT)\n\t\t\t+ DECODE(TBR.ITEM_TYPE, 'Return', -1, 1) * ZEROIFNULL(PROMOTIONAL_DISCOUNT_AMOUNT)\n\t\t\t+ DECODE(TBR.ITEM_TYPE, 'Return', -1, 1) * ZEROIFNULL(CENTRAL_MARKDOWN_DISCOUNT_AMOUNT)\n\t\t\t+ DECODE(TBR.ITEM_TYPE, 'Return', -1, 1) * ZEROIFNULL(STORE_MARKDOWN_DISCOUNT_AMOUNT)\n\t\t\t+ DECODE(TBR.ITEM_TYPE, 'Return', -1, 1) * ZEROIFNULL(MARKETING_NECTAR_PRICE_DISCOUNT_AMOUNT)\n\t\t\t+ DECODE(TBR.ITEM_TYPE, 'Return', -1, 1) * ZEROIFNULL(OTHER_CORPORATE_VOUCHER_AMOUNT)\n\tEND \t\t\t\t\t\t\t\t\t\t\tAS PRE_PROMOTIONAL_SALE_AMOUNT\n    ,ZEROIFNULL(PRE_PROMOTIONAL_SALE_AMOUNT - CENTRAL_MARKDOWN_DISCOUNT_AMOUNT - PROMOTIONAL_DISCOUNT_AMOUNT - STORE_MARKDOWN_DISCOUNT_AMOUNT - MARKETING_NECTAR_PRICE_DISCOUNT_AMOUNT - MARKETING_ITEM_LEVEL_DISCOUNT_AMOUNT) AS GROSS_SALE_AMOUNT\n    ,GROSS_SALE_AMOUNT - MARKETING_BASKET_LEVEL_DISCOUNT_AMOUNT - STAFF_DISCOUNT_AMOUNT - abs(ZEROIFNULL(OTHER_CORPORATE_VOUCHER_AMOUNT)) NET_RETAIL_SALES_AMOUNT\n\t,TBR.PRIMARY_ENTITY_ID\n    ,TBR.TECHNICAL_METADATA\n    ,IBR.ITEM_NAME\n    ,NVL2(PBR.BASE_PRICE_AMT, 1, 0) AS BASE_PRICE_USE_INDICATOR\n    ,ZEROIFNULL(PBR.SELLING_PRICE_AMT)\t\t\t\t\t\t\tAS SELLING_PRICE_AMOUNT\n    ,TBR.PURCHASE_TRANSACTION_STORE_NK1\n    ,TBR.PURCHASE_TRANSACTION_STORE_NK2\n    ,TBR.PURCHASE_TRANSACTION_STORE_NK3\n    ,TBR.PURCHASE_TRANSACTION_SOURCE_ID\n    ,TBR.PURCHASE_TRANSACTION_END_TS\nFROM {{ref('sale_transaction_header_stssls_link')}}  HSL\n    JOIN {{ref('sts_bdv_sale_transaction_item_br_base')}}    TBR\n        ON HSL.STORE_NK1 = TBR.STORE_NK1\n        AND HSL.TRANSACTION_ID = TBR.TRANSACTION_ID\n        AND HSL.TRANSACTION_END_TS = TBR.TRANSACTION_END_TS\n    LEFT OUTER JOIN {{source('ADW_BDV', 'ITEM_BR')}} IBR\n        ON ( TBR.ITEM_NK1 = IBR.ITEM_NK1\n        AND TO_DATE(TBR.TRANSACTION_END_TS) BETWEEN IBR.VALID_FROM_DT AND IBR.VALID_TO_DT )\n    LEFT OUTER JOIN  {{source('ADW_RDV', 'SALE_TRANSACTION_EXCLUDED_SUB_CATS_REF')}} SREF\n      ON (IBR.SUB_CAT_NK1=SREF.SUBCAT_ID)\n    LEFT OUTER JOIN {{source('ADW_BDV', 'ITEM_STORE_PRICE_BR')}}         PBR\n        ON TO_NUMBER(TBR.STORE_CD)  = TO_NUMBER(PBR.STORE_CD)\n        AND TBR.ITEM_NK1 = PBR.ITEM_CD\n        AND TO_DATE(TBR.VALID_DATE)  BETWEEN PBR.VALID_FROM_DT AND PBR.VALID_UNTIL_DT\n    LEFT OUTER JOIN {{ref('sts_bdv_sale_transaction_item_br_rpm')}} MSL\n        ON TBR.STORE_NK1 = MSL.STORE_NK1\n        AND TBR.TRANSACTION_ID = MSL.TRANSACTION_ID\n        AND TBR.ITEM_SEQUENCE_NUMBER = MSL.ITEM_SEQUENCE_NUMBER\n\tLEFT OUTER JOIN {{source('ADW_BDV', 'DIM_ITEM_BR')}}   DIBR\n\t\tON TBR.ITEM_NK1 = DIBR.ITEM_CD\n    LEFT OUTER JOIN {{ref('sts_bdv_item_promotion_tender_rewards_tab')}} IPTR\n\t\tON  TBR.TRANSACTION_ID = IPTR.TRANSACTION_ID\n\t\tAND  TBR.TRANSACTION_END_TS = IPTR.TRANSACTION_END_TS\n\t\tAND TBR.ITEM_SEQUENCE_NUMBER = IPTR.ITEM_SEQUENCE_NUMBER\n--WHERE HSL.TRANSACTION_END_TS >= '2021-10-01'\nWHERE HSL.TRANSACTION_END_TS >= '2022-04-01'", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.kiwi_dbt.ADW_BDV.ITEM_BR", "source.kiwi_dbt.ADW_RDV.SALE_TRANSACTION_EXCLUDED_SUB_CATS_REF", "source.kiwi_dbt.ADW_BDV.ITEM_STORE_PRICE_BR", "source.kiwi_dbt.ADW_BDV.DIM_ITEM_BR", "model.kiwi_dbt.sale_transaction_header_stssls_link", "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_base", "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_rpm", "model.kiwi_dbt.sts_bdv_item_promotion_tender_rewards_tab"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_BDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "BDV", "sts_bdv_sale_transaction_item_br_v"], "unique_id": "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\BDV\\sts_bdv_sale_transaction_item_br_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\BDV\\sts_bdv_sale_transaction_item_br_v.sql", "name": "sts_bdv_sale_transaction_item_br_v", "alias": "sts_bdv_sale_transaction_item_br_v", "checksum": {"name": "sha256", "checksum": "d34ae61dc7dc42816bbe25d79bb070e4bb452a1251d978cf25da79822389e1b7"}, "tags": ["KIWI_BDV"], "refs": [["sale_transaction_header_stssls_link"], ["sts_bdv_sale_transaction_item_br_base"], ["sts_bdv_sale_transaction_item_br_rpm"], ["sts_bdv_item_promotion_tender_rewards_tab"]], "sources": [["ADW_BDV", "ITEM_BR"], ["ADW_RDV", "SALE_TRANSACTION_EXCLUDED_SUB_CATS_REF"], ["ADW_BDV", "ITEM_STORE_PRICE_BR"], ["ADW_BDV", "DIM_ITEM_BR"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_BDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.dim_promotion_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_PL'],\n        schema='ADW_SALES_TRAN', \n    )\n}}\n\n\nSELECT SRC.PROMOTION_CD            AS PROMOTION_CD\n     , SRC.PROMOTION_NAME          AS PROMOTION_NAME\n     , TO_VARIANT(OBJECT_CONSTRUCT\n          (\n           'BATCH_ID', {{ var('kiwi_current_load_time')}}\n          ,'JOB_NAME', 'BDV_promotion_rep_to_PL_dim_promotion'\n          ,'LOAD_TS', {{ var('kiwi_current_load_time')}}\n          )\n      )                            AS TECHNICAL_METADATA\n   FROM {{ref('promotion_rep')}}  SRC\n  WHERE NOT EXISTS (SELECT 1 \n                      FROM ADW_SALES_PL.DIM_PROMOTION DEST \n                     WHERE DEST.PROMOTION_CD = SRC.PROMOTION_CD)", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.promotion_rep"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_PL"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "PL", "dim_promotion_v"], "unique_id": "model.kiwi_dbt.dim_promotion_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\PL\\dim_promotion_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\PL\\dim_promotion_v.sql", "name": "dim_promotion_v", "alias": "dim_promotion_v", "checksum": {"name": "sha256", "checksum": "8b7ce4c1679b86799074c6a6c2223c602f4bc5bd3804dd14767358fc911dd688"}, "tags": ["KIWI_PL"], "refs": [["promotion_rep"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_PL"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.dim_tender_reward_type_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_PL'],\n        schema='ADW_SALES_TRAN', \n    )\n}}\n\n\nSELECT SRC.TENDER_REWARD_TYPE_CD             AS TENDER_REWARD_TYPE_CD\n     , SRC.TENDER_REWARD_TYPE_NAME           AS TENDER_REWARD_TYPE_NAME\n     , TO_VARIANT(OBJECT_CONSTRUCT\n          (\n            'BATCH_ID', {{ var('kiwi_current_load_time')}}\n           ,'JOB_NAME', 'BDV_tender_reward_type_rep_to_PL_dim_tender_reward_type'\n           ,'LOAD_TS', {{ var('kiwi_current_load_time')}}\n          )\n        )                                    AS TECHNICAL_METADATA\n  FROM {{source('ADW_BDV', 'TENDER_REWARD_TYPE_REP')}} SRC\n WHERE NOT EXISTS (SELECT 1 \n                     FROM ADW_SALES_PL.DIM_TENDER_REWARD_TYPE DEST\n                    WHERE DEST.TENDER_REWARD_TYPE_CD = SRC.TENDER_REWARD_TYPE_CD)", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.kiwi_dbt.ADW_BDV.TENDER_REWARD_TYPE_REP"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_PL"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "PL", "dim_tender_reward_type_v"], "unique_id": "model.kiwi_dbt.dim_tender_reward_type_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\PL\\dim_tender_reward_type_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\PL\\dim_tender_reward_type_v.sql", "name": "dim_tender_reward_type_v", "alias": "dim_tender_reward_type_v", "checksum": {"name": "sha256", "checksum": "977d1cd1aba760edec32003600d979a0e56b81944ff52ba5b733cddbb9368986"}, "tags": ["KIWI_PL"], "refs": [], "sources": [["ADW_BDV", "TENDER_REWARD_TYPE_REP"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_PL"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.dim_tender_type_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_PL'],\n        schema='ADW_SALES_TRAN', \n    )\n}}\n\n\nSELECT SRC.TENDER_TYPE_CD                        AS TENDER_TYPE_CD\n     , SRC.TENDER_TYPE_NAME                      AS TENDER_TYPE_NAME\n     , TO_VARIANT(OBJECT_CONSTRUCT\n          (\n           'BATCH_ID', {{ var('kiwi_current_load_time')}}\n          ,'JOB_NAME', 'BDV_tender_type_rep_to_PL_dim_tender_type'\n          ,'LOAD_TS', {{ var('kiwi_current_load_time')}}\n          )\n      )                                          AS TECHNICAL_METADATA\n  FROM {{source('ADW_BDV', 'TENDER_TYPE_REP')}} SRC\n WHERE NOT EXISTS (SELECT 1\n                     FROM ADW_SALES_PL.DIM_TENDER_TYPE DEST\n                    WHERE DEST.TENDER_TYPE_CD = SRC.TENDER_TYPE_CD)", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.kiwi_dbt.ADW_BDV.TENDER_TYPE_REP"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_PL"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "PL", "dim_tender_type_v"], "unique_id": "model.kiwi_dbt.dim_tender_type_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\PL\\dim_tender_type_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\PL\\dim_tender_type_v.sql", "name": "dim_tender_type_v", "alias": "dim_tender_type_v", "checksum": {"name": "sha256", "checksum": "b7731616a07ba7da5ca4516ff4c7a3db0fde261832b17d401ce6f5e47d6c8dbe"}, "tags": ["KIWI_PL"], "refs": [], "sources": [["ADW_BDV", "TENDER_TYPE_REP"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_PL"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.fact_sale_transaction_item_tender_reward_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_PL'],\n        schema='ADW_SALES_TRAN', \n    )\n}}\n\n\nSELECT  SRC.STORE_NK1                       AS STORE_CD\n      , SRC.TRANSACTION_ID                  AS TRANSACTION_ID\n      , SRC.ITEM_SEQUENCE_NUMBER            AS ITEM_SEQUENCE_NUM\n      , SRC.TENDER_REWARD_SEQUENCE_NUMBER   AS TENDER_REWARD_SEQUENCE_NUM\n      , SRC.OPERATING_COMPANY_CD            AS OPERATING_COMPANY_CD\n      , SRC.ITEM_NK1                        AS ITEM_CD\n      , SRC.TENDER_REWARD_TYPE_CD           AS TENDER_REWARD_TYPE_CD\n      , SRC.PROMOTION_ID                    AS PROMOTION_CD\n      , SRC.COUPON_NK1                      AS COUPON_CD\n      , TO_DATE(SRC.TRANSACTION_END_TS)     AS TRANSACTION_DT\n      , SRC.REWARD_AMOUNT                   AS REWARD_AMT\n      , SRC.REWARD_TYPE                     AS REWARD_TYPE\n      , TO_VARIANT(OBJECT_CONSTRUCT         \n         (\n          'BATCH_ID', {{ var('kiwi_current_load_time')}} ,\n          'EFFECTIVE_FROM', {{ var('kiwi_current_load_time')}} ,\n          'JOB_NAME', 'BDV_tender_reward_br_to_PL_fact_sale_trans_tender_reward',\n          'LOAD_TS', {{ var('kiwi_current_load_time')}} \n         )\n      )       AS TECHNICAL_METADATA\n  FROM (SELECT STORE_NK1, \n               TRANSACTION_ID, \n               ITEM_SEQUENCE_NUMBER, \n               TENDER_REWARD_SEQUENCE_NUMBER, \n               OPERATING_COMPANY_CD,\n               ITEM_NK1, \n               IFNULL(TENDER_REWARD_TYPE_CD, '-2') AS TENDER_REWARD_TYPE_CD , \n               IFNULL(PROMOTION_ID,'-2') AS PROMOTION_ID,\n               IFNULL(COUPON_NK1,'-2') AS COUPON_NK1, \n               TRANSACTION_END_TS,\n               REWARD_AMOUNT, \n               REWARD_TYPE \n         FROM ref{{('sale_transaction_tender_reward_br')}} SALE_TRAN_BR\n         LEFT JOIN {{source('ADW_DEV_ADW_SALES_PL', 'DIM_TENDER_REWARD_TYPE')}}     DIM_TEND \n           ON SALE_TRAN_BR.PROMOTION_TENDER_REWARD_TYPE = DIM_TEND.TENDER_REWARD_TYPE_NAME\n         LEFT JOIN {{source('ADW_DEV_ADW_REFERENCE_PL', 'DIM_OPERATING_COMPANY')}}   DIM_OP \n           ON INITCAP(SALE_TRAN_BR.TRADING_ENTITY_CD) = REPLACE(DIM_OP.OPERATING_COMPANY_NAME, '''','')\n       ) SRC\n WHERE NOT EXISTS (SELECT 1  \n                     FROM ADW_SALES_PL.FACT_SALE_TRANSACTION_ITEM_TENDER_REWARD DEST\n                    WHERE DEST.STORE_CD = SRC.STORE_NK1 \n                      AND DEST.TRANSACTION_ID = SRC.TRANSACTION_ID \n                      AND DEST.ITEM_SEQUENCE_NUM = SRC.ITEM_SEQUENCE_NUMBER \n                      AND DEST.TENDER_REWARD_SEQUENCE_NUM = SRC.TENDER_REWARD_SEQUENCE_NUMBER)", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.kiwi_dbt.ADW_DEV_ADW_SALES_PL.DIM_TENDER_REWARD_TYPE", "source.kiwi_dbt.ADW_DEV_ADW_REFERENCE_PL.DIM_OPERATING_COMPANY"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_PL"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "PL", "fact_sale_transaction_item_tender_reward_v"], "unique_id": "model.kiwi_dbt.fact_sale_transaction_item_tender_reward_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\PL\\fact_sale_transaction_item_tender_reward_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\PL\\fact_sale_transaction_item_tender_reward_v.sql", "name": "fact_sale_transaction_item_tender_reward_v", "alias": "fact_sale_transaction_item_tender_reward_v", "checksum": {"name": "sha256", "checksum": "ab902e651bb52453b5f229b925aad07d7d8c3551678e7f5bd01185b34ff643e9"}, "tags": ["KIWI_PL"], "refs": [], "sources": [["ADW_DEV_ADW_SALES_PL", "DIM_TENDER_REWARD_TYPE"], ["ADW_DEV_ADW_REFERENCE_PL", "DIM_OPERATING_COMPANY"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_PL"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.fact_sale_transaction_tender_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_PL'],\n        schema='ADW_SALES_TRAN', \n    )\n}}\n\n\nSELECT SRC.STORE_NK1                                AS STORE_CD\n     , SRC.TRANSACTION_ID                           AS TRANSACTION_ID\n     , SRC.PAYMENT_SEQUENCE_NUMBER                  AS TENDER_SEQUENCE_NUM\n     , SRC.OPERATING_COMPANY_CD                     AS OPERATING_COMPANY_CD\n     , SRC.TENDER_TYPE_ID                           AS TENDER_TYPE_CD\n     , SRC.PROMOTION_ID                             AS PROMOTION_CD\n     , SRC.COUPON_NK1                               AS COUPON_CD\n     , TO_DATE(SRC.TRANSACTION_END_TS)              AS TRANSACTION_DT\n     , SRC.PAYMENT_SERVICE_PROVIDER                 AS PAYMENT_SERVICE_PROVIDER_CD\n     , SRC.FACE_AMOUNT                              AS FACE_AMT\n     , SRC.FACE_AMOUNT_CURRENCY_NK1                 AS FACE_CURRENCY_CD\n     , SRC.TENDER_AMOUNT                            AS TENDER_AMT\n     , SRC.CURRENCY_NK1                             AS TENDER_CURRENCY_CD\n     , SRC.TENDER_CHANGE_AMOUNT                     AS CHANGE_AMT\n     , SRC.TENDER_CHANGE_CURRENCY_NK1               AS CHANGE_CURRENCY_CD\n     , TO_VARIANT(OBJECT_CONSTRUCT                  \n            (\n             'BATCH_ID', {{ var('kiwi_current_load_time')}}\n            ,'EFFECTIVE_FROM', {{ var('kiwi_current_load_time')}}\n            ,'LOAD_TS', {{ var('kiwi_current_load_time')}}\n            ,'JOB_NAME', 'BDV_payment_br_to_PL_fact_sale_transaction_tender'\n            )\n          ) AS TECHNICAL_METADATA\n FROM (SELECT STORE_NK1, \n              TRANSACTION_ID, \n              PAYMENT_SEQUENCE_NUMBER, \n              IFNULL(OPERATING_COMPANY_CD,'-1') AS OPERATING_COMPANY_CD,\n              TENDER_TYPE_ID, \n              IFNULL(PROMOTION_ID,'-2') AS PROMOTION_ID, \n              IFNULL(COUPON_NK1,'-2') AS COUPON_NK1,\n              TRANSACTION_END_TS,\n              PAYMENT_SERVICE_PROVIDER, \n              FACE_AMOUNT, \n              IFNULL(FACE_AMOUNT_CURRENCY_NK1,'-2') AS FACE_AMOUNT_CURRENCY_NK1,\n              TENDER_AMOUNT, IFNULL(CURRENCY_NK1,'-2') AS CURRENCY_NK1, \n              TENDER_CHANGE_AMOUNT,\n              IFNULL(TENDER_CHANGE_CURRENCY_NK1,'-2') AS TENDER_CHANGE_CURRENCY_NK1  \n         FROM {{ref('sale_transaction_payment_br')}}  STP\n         LEFT JOIN {{source('ADW_REFERENCE_PL', 'DIM_OPERATING_COMPANY')}} OC\n           ON INITCAP(STRTOK(STP.PRIMARY_ENTITY_ID, '.', 2)) = REPLACE(OC.OPERATING_COMPANY_NAME, '''','')\n      )  SRC\n WHERE NOT EXISTS (SELECT 1 \n                     FROM ADW_SALES_PL.FACT_SALE_TRANSACTION_TENDER DEST\n                    WHERE DEST.STORE_CD = SRC.STORE_NK1 \n                      AND DEST.TRANSACTION_ID = SRC.TRANSACTION_ID \n                      AND DEST.TENDER_SEQUENCE_NUM = SRC.PAYMENT_SEQUENCE_NUMBER \n                      AND DEST.TRANSACTION_DT = TO_DATE(SRC.TRANSACTION_END_TS)\n )", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.kiwi_dbt.ADW_REFERENCE_PL.DIM_OPERATING_COMPANY", "model.kiwi_dbt.sale_transaction_payment_br"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_PL"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "PL", "fact_sale_transaction_tender_v"], "unique_id": "model.kiwi_dbt.fact_sale_transaction_tender_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\PL\\fact_sale_transaction_tender_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\PL\\fact_sale_transaction_tender_v.sql", "name": "fact_sale_transaction_tender_v", "alias": "fact_sale_transaction_tender_v", "checksum": {"name": "sha256", "checksum": "df1d99b0097635ae1c2efa50217bad7c0a1d48d9c4366c1a253fa7211baabc4b"}, "tags": ["KIWI_PL"], "refs": [["sale_transaction_payment_br"]], "sources": [["ADW_REFERENCE_PL", "DIM_OPERATING_COMPANY"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_PL"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_item_price_modifier_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\n    )\n}}\n\n\t    SELECT\n\t\t       LOAD_TS\n\t\t      ,STORE_ID\n\t\t      ,TRANSACTION_ID\n\t\t      ,TRANSACTION_END_TS\n\t\t      ,TRANSACTION_STATUS\n\t\t      ,PRIMARY_ENTITY_ID\n\t\t      ,ITEM.VALUE:SequenceNumber::NUMBER(38,0) AS ITEM_SEQUENCE_NUMBER\n\t\t      ,ITEM.VALUE:SKU AS SKU\n\t\t      ,RETAIL_PRICE_MODIFIER.VALUE:SequenceNumber::NUMBER(38,0) AS MODIFIER_SEQUENCE_NUMBER\n\t\t      ,RETAIL_PRICE_MODIFIER.VALUE:MethodCode::VARCHAR(128) AS MODIFIER_TYPE\n\t\t      ,RETAIL_PRICE_MODIFIER.VALUE:ReasonCode::VARCHAR(128) AS MODIFIER_REASON_CODE\n\t\t      ,RETAIL_PRICE_MODIFIER.VALUE:Amount.Action::VARCHAR(128) AS MODIFIER_ACTION\n\t\t      ,RETAIL_PRICE_MODIFIER.VALUE:Amount.Amount.Amount::NUMBER(38,8) AS MODIFIER_AMOUNT\n\t\t      ,RETAIL_PRICE_MODIFIER.VALUE:PromotionID::NUMBER(38,0) AS PROMOTION_ID\n\t\t      ,RETAIL_PRICE_MODIFIER.VALUE:Description::VARCHAR(128) AS PROMOTION_DESCRIPTION\n\t\t      ,RETAIL_PRICE_MODIFIER.VALUE:PreviousPrice.Amount::NUMBER(38,8) AS PREVIOUS_PRICE_AMOUNT\n\t\t      ,RETAIL_PRICE_MODIFIER.VALUE:Participator::VARCHAR(128) AS PROMOTION_PARTICIPATOR\n\t\t      ,RETAIL_PRICE_MODIFIER.VALUE:ApportionedAmount.Amount::NUMBER(38,8) AS APPORTIONED_AMOUNT\n\t\t      ,DQ_AUDIT\n\t      FROM {{ ref('raw_osts_trans') }}   RAW_OSTS_TRANS,\n\t           LATERAL FLATTEN(input => ITEMS) AS ITEM,\n\t           LATERAL FLATTEN(input => ITEM.VALUE:RetailPriceModifier) AS RETAIL_PRICE_MODIFIER\n\t     WHERE RETAIL_PRICE_MODIFIER.VALUE IS NOT NULL", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "raw_osts_item_price_modifier_v"], "unique_id": "model.kiwi_dbt.raw_osts_item_price_modifier_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_item_price_modifier_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_item_price_modifier_v.sql", "name": "raw_osts_item_price_modifier_v", "alias": "raw_osts_item_price_modifier_v", "checksum": {"name": "sha256", "checksum": "3c3a8ae621195dd89e0bac5a04c0f80fb0e934d779f3ac77526a3f32309b2567"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_item_promotion_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\n    )\n}}\n\nSELECT PROMOTION_ID AS PROMOTION_NK1,\n       '~~' AS PROMOTION_NK2,\n       '~~' AS PROMOTION_NK3,\n       PROMOTION_DESCRIPTION AS PROMOTION_NAME,\n       {{ var('kiwi_current_load_time') }}  AS LOAD_TS,\n\n       TO_VARIANT(OBJECT_CONSTRUCT\n\t\t\t    (\n\t\t\t'BATCH_ID', {{ var('kiwi_current_load_time') }} ,\n\t\t\t'EFFECTIVE_FROM_TS', TRANSACTION_END_TS,\n\t\t\t'JOB_NAME', 'curated_sale_trans_promotion_to_RDV_sale_trans_promotion_hub',\n\t\t\t'LOAD_TS', {{ var('kiwi_current_load_time') }} ,\n\t\t\t'SOURCE_SYSTEM_CD', '{{ var('kiwi_source_system_cd') }}' \n\t\t\t)\n\t\t   ) AS  HUB_TECHNICAL_METADATA,\n      TO_VARIANT(OBJECT_CONSTRUCT\n\t\t\t(\n\t\t\t'BATCH_ID', {{ var('kiwi_current_load_time') }} ,\n\t\t\t'EFFECTIVE_FROM_TS', TRANSACTION_END_TS,\n\t\t\t'JOB_NAME', 'curated_sale_trans_promotion_to_RDV_sale_trans_promotion_stssls_sat',\n\t\t\t'LOAD_TS', {{ var('kiwi_current_load_time') }} ,\n\t\t\t'SOURCE_SYSTEM_CD', '{{ var('kiwi_source_system_cd') }}'\n\t\t\t)\n\t\t  )AS  SAT_TECHNICAL_METADATA\n FROM ( \n        SELECT\n\t           PROMO_TENDER_REWARDS.VALUE:PromotionID::VARCHAR(128) AS PROMOTION_ID,\n\t           PROMO_TENDER_REWARDS.VALUE:Description::VARCHAR(128) AS PROMOTION_DESCRIPTION,\n               'STS_AVRO' Source_name,\n               TRANSACTION_END_TS\n          FROM {{ ref('raw_osts_trans') }}  raw_osts_trans,\n\t           LATERAL FLATTEN(input => ITEMS) AS ITEM,\n\t           LATERAL FLATTEN(input => ITEM.VALUE:PromotionTenderRewards) AS PROMO_TENDER_REWARDS\n         WHERE PROMO_TENDER_REWARDS.VALUE IS NOT NULL\n         UNION\n        SELECT \n               promo_id as PROMOTION_ID\n              ,coupon_name AS PROMOTION_DESCRIPTION,\n              'ADW_PRODUCT_TRAN' as Source_name\n              ,CreateDate as TRANSACTION_END_TS\n         FROM {{source('ADW_PRODUCT_TRAN', 'FINANCE_OCCDTL_VW')}}  FINANCE_OCCDTL_VW\n        WHERE promo_id NOT IN (SELECT PROMOTION_NK1 FROM ADW_RDV.SALE_TRANS_PROMOTION_HUB)\n          AND promo_id IS NOT NULL\n        )", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.kiwi_dbt.ADW_PRODUCT_TRAN.FINANCE_OCCDTL_VW", "model.kiwi_dbt.raw_osts_trans"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "raw_osts_item_promotion_v"], "unique_id": "model.kiwi_dbt.raw_osts_item_promotion_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_item_promotion_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_item_promotion_v.sql", "name": "raw_osts_item_promotion_v", "alias": "raw_osts_item_promotion_v", "checksum": {"name": "sha256", "checksum": "b0b00cadc703e068022e97a509488886fec6d9b96ef6420499816e30b6cfe644"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans"]], "sources": [["ADW_PRODUCT_TRAN", "FINANCE_OCCDTL_VW"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_item_promo_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\n    )\n}}\n\n\tSELECT\n\t\t LOAD_TS\n\t\t,STORE_ID\n\t\t,TRANSACTION_ID\n\t\t,TRANSACTION_END_TS\n\t\t,TRANSACTION_STATUS\n\t\t,PRIMARY_ENTITY_ID\n        ,TRANSACTION_PROVIDER_NAME\n\t\t,ITEM.VALUE:SequenceNumber::NUMBER(38,0) AS ITEM_SEQUENCE_NUMBER\n\t\t,ITEM.VALUE:SKU AS SKU\n\t\t,PROMO_TENDER_REWARDS.VALUE:PromotionID::VARCHAR(128) AS PROMOTION_ID\n\t\t,PROMO_TENDER_REWARDS.VALUE:Description::VARCHAR(128) AS PROMOTION_DESCRIPTION\n\t\t,PROMO_TENDER_REWARDS.VALUE:Type::VARCHAR(128) AS PROMOTION_Type\n\t\t,PROMO_TENDER_REWARDS.VALUE:Value::NUMBER(18,8) AS PROMOTION_Value\n\t\t,DQ_AUDIT\n\tFROM {{ ref('raw_osts_trans') }}  raw_osts_trans,\n\tLATERAL FLATTEN(input => ITEMS) AS ITEM,\n\tLATERAL FLATTEN(input => ITEM.VALUE:PromotionTenderRewards) AS PROMO_TENDER_REWARDS\n\tWHERE PROMO_TENDER_REWARDS.VALUE IS NOT NULL", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "raw_osts_item_promo_v"], "unique_id": "model.kiwi_dbt.raw_osts_item_promo_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_item_promo_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_item_promo_v.sql", "name": "raw_osts_item_promo_v", "alias": "raw_osts_item_promo_v", "checksum": {"name": "sha256", "checksum": "7e66e5dea8cdd9c996d48d974782847ac0fb56235b39bc483bbdf3f9c612b6d2"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_promo_data_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n    )\n}}\n\n\nSELECT PROMOTION_CD, \n       PROMOTION_NAME, \n       TO_VARIANT(OBJECT_CONSTRUCT\n\t\t\t\t(\n\t\t\t\t'BATCH_ID', {{ var('kiwi_current_load_time')}}\n\t\t\t\t,'EFFECTIVE_FROM_TS', {{ var('kiwi_current_load_time')}}\n\t\t\t\t,'JOB_NAME',  'RDV_sale_trans_coupon_to_BDV_promotion_rep'\n\t\t\t\t,'LOAD_TS', {{ var('kiwi_current_load_time')}}\n\t\t\t\t)\n\t\t\t) AS TECHNICAL_METADATA\n  FROM (\n        SELECT FLOOR(PROMOTION_NK1) AS PROMOTION_CD, \n               PROMOTION_NAME \n          FROM {{source('ADW_RDV', 'SALE_TRANS_PROMOTION_STSSLS_SAT')}} SALE_TRANS_PROMOTION_STSSLS_SAT\n\t     WHERE PROMOTION_CD||PROMOTION_NAME NOT IN (SELECT PROMOTION_CD||PROMOTION_NAME FROM {{source('ADW_BDV', 'PROMOTION_REP')}} PROMOTION_REP WHERE PROMOTION_CD IS NOT NULL AND PROMOTION_NAME IS NOT NULL)\n           AND PROMOTION_CD IS NOT NULL\n  \t     UNION\n\t    SELECT COUPON_PROMOTION_ID AS PROMOTION_CD,\n\t           COUPON_NAME AS PROMOTION_NAME \n\t      FROM {{source('ADW_RDV', 'COUPON_OCCDTL_SAT')}} COUPON_OCCDTL_SAT\n\t      WHERE PROMOTION_CD||PROMOTION_NAME NOT IN (SELECT PROMOTION_CD||PROMOTION_NAME FROM {{source('ADW_BDV', 'PROMOTION_REP')}} PROMOTION_REP WHERE PROMOTION_CD IS NOT NULL AND PROMOTION_NAME IS NOT NULL)\n            AND PROMOTION_CD IS NOT NULL\n       ) SRC \n WHERE NOT EXISTS (SELECT 1 \n                     FROM ADW_BDV.PROMOTION_REP DEST \n                    WHERE DEST.PROMOTION_CD = SRC.PROMOTION_CD \n                      AND DEST.PROMOTION_NAME = SRC.PROMOTION_NAME)", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.kiwi_dbt.ADW_RDV.SALE_TRANS_PROMOTION_STSSLS_SAT", "source.kiwi_dbt.ADW_BDV.PROMOTION_REP", "source.kiwi_dbt.ADW_RDV.COUPON_OCCDTL_SAT", "source.kiwi_dbt.ADW_BDV.PROMOTION_REP"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "raw_osts_promo_data_v"], "unique_id": "model.kiwi_dbt.raw_osts_promo_data_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_promo_data_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_promo_data_v.sql", "name": "raw_osts_promo_data_v", "alias": "raw_osts_promo_data_v", "checksum": {"name": "sha256", "checksum": "192bed08dc2bd56e5ec8b4a0789b6dbe5247356d178dadffd8779e7c461bb53f"}, "tags": ["KIWI_RDV"], "refs": [], "sources": [["ADW_RDV", "SALE_TRANS_PROMOTION_STSSLS_SAT"], ["ADW_BDV", "PROMOTION_REP"], ["ADW_RDV", "COUPON_OCCDTL_SAT"], ["ADW_BDV", "PROMOTION_REP"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_trans_coupon_link_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\t    \n\t\t\n    )\n}}\n\n\n\nSELECT SRC.STORE_ID AS STORE_NK1\n\t\t,'~~'       AS STORE_NK2\n\t\t,'~~'       AS STORE_NK3\n\t\t,SRC.TRANSACTION_ID   AS TRANSACTION_ID\n\t\t,SRC.TRANSACTION_END_TS AS TRANSACTION_END_TS\n\t\t,SRC.BARCODE_NUMBER     AS BARCODE\n\t\t,SRC.PROMOTION_ID       AS PROMOTION_ID\n\t\t,SRC.PROMOTION_DESCRIPTION  AS PROMOTION_DESCRIPTION\n\t\t,SRC.COUPON_VALUE       AS REWARD_VALUE\n\t\t,SRC.REWARD_TYPE        AS REWARD_TYPE\n\t\t,SRC.THRESHOLD_VALUE    AS THRESHOLD\n\t\t,'{{ var('kiwi_source_system_cd') }}'      AS SOURCE_SYSTEM_CD\n\t\t,'{{ var('kiwi_trans_item_coupon_reason_cd') }}' AS REASON_CD\n\t\t,TO_VARIANT(OBJECT_CONSTRUCT\n\t\t\t(\n\t\t\t'BATCH_ID', {{ var('kiwi_current_load_time') }}  ,\n\t\t\t'EFFECTIVE_FROM_TS', SRC.TRANSACTION_END_TS,\n\t\t\t'JOB_NAME', '{{ var('kiwi_job_name') }}'  ,\n\t\t\t'LOAD_TS', SRC.LOAD_TS,\n\t\t\t'REASON_CD','{{ var('kiwi_trans_item_coupon_reason_cd') }}' ,\n\t\t\t'RECORD_DELETED_FLAG', 'N',\n\t\t\t'RECORD_ID', MD5(CONCAT(SRC.TRANSACTION_ID, SRC.BARCODE_NUMBER)),\n\t\t\t'SOURCE_SYSTEM_CD', '{{ var('kiwi_source_system_cd') }}'  \n\t\t\t)\n\t\t) AS TECHNICAL_METADATA\n   FROM {{ ref('raw_osts_trans_coupon') }}  SRC\n  WHERE NOT EXISTS (SELECT 1\n                      FROM ADW_RDV.SALE_TRANSACTION_COUPON_STSSLS_LINK DEST\n                     WHERE DEST.TRANSACTION_ID = SRC.TRANSACTION_ID \n                       AND DEST.STORE_NK1 = SRC.STORE_ID \n                       AND DEST.BARCODE = SRC.BARCODE_NUMBER \n                       AND DEST.SOURCE_SYSTEM_CD = '{{ var('kiwi_source_system_cd') }}'  \n                       AND DEST.REASON_CD = '{{ var('kiwi_trans_item_coupon_reason_cd') }}'   )", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans_coupon"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "raw_osts_trans_coupon_link_v"], "unique_id": "model.kiwi_dbt.raw_osts_trans_coupon_link_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_trans_coupon_link_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_trans_coupon_link_v.sql", "name": "raw_osts_trans_coupon_link_v", "alias": "raw_osts_trans_coupon_link_v", "checksum": {"name": "sha256", "checksum": "ed1e11f524fd838a47e8da926fffd1bc2b097db8f94adb0b5c3fa5e88832e3f5"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans_coupon"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_trans_coupon_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\n    )\n}}\n\n\n\n        SELECT\n                 LOAD_TS\n                ,STORE_ID\n                ,TRANSACTION_ID\n                ,TRANSACTION_END_TS\n                ,TRANSACTION_STATUS\n                ,PRIMARY_ENTITY_ID\n                ,COUPON.VALUE:Barcode AS BARCODE_NUMBER\n                ,COUPON.VALUE:PromotionDescription AS PROMOTION_DESCRIPTION\n                ,COUPON.VALUE:PromotionID AS PROMOTION_ID\n                ,COUPON.VALUE:RewardType AS REWARD_TYPE\n                ,COUPON.VALUE:Threshold AS THRESHOLD_VALUE\n                ,COUPON.VALUE:Value AS COUPON_VALUE\n                ,DQ_AUDIT\n        FROM {{ ref('raw_osts_trans') }}  raw_osts_trans,\n        LATERAL FLATTEN(input => COUPONS) AS COUPON", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "raw_osts_trans_coupon_v"], "unique_id": "model.kiwi_dbt.raw_osts_trans_coupon_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_trans_coupon_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_trans_coupon_v.sql", "name": "raw_osts_trans_coupon_v", "alias": "raw_osts_trans_coupon_v", "checksum": {"name": "sha256", "checksum": "08362513c323c7362d596bced01c0c8e8f5f34c4977b2a47ce50b578e0bee8e8"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_trans_header_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\t    \n\t\t\n    )\n}}\n\n\n SELECT  SRC.STORE_ID  AS STORE_NK1\n\t\t,'~~'          AS STORE_NK2\n\t\t,'~~'          AS STORE_NK3\n\t\t,SRC.TRANSACTION_ID\n\t\t,SRC.TRANSACTION_END_TS\n\t\t,SRC.TRANSACTION_PROVIDER_NAME\n\t\t,'{{ var('kiwi_source_system_cd') }}'         AS SOURCE_SYSTEM_CD\n\t\t,'{{ var('kiwi_trans_header_reason_cd') }}'   AS REASON_CD\n\t\t,SRC.TRANSACTION_STATUS\n\t\t,SRC.PRIMARY_ENTITY_ID\n\t\t,SRC.GROSS_AMOUNT\n\t\t,SRC.NET_AMOUNT\n\t\t,SRC.TOTAL_SAVINGS_AMOUNT\n\t\t,SRC.PURCHASE_QUANTITY\n\t\t,SRC.SALES_CHANNEL_NAME\n\t\t,SRC.ORDER_NUMBER\n\t\t,TO_VARIANT(OBJECT_CONSTRUCT\n\t\t\t(\n\t\t\t'LOAD_TS', SRC.LOAD_TS,\n\t\t\t'BATCH_ID', {{ var('kiwi_current_load_time') }} ,\n\t\t\t'EFFECTIVE_FROM_TS', SRC.TRANSACTION_END_TS,\n\t\t\t'JOB_NAME',  '{{ var('kiwi_job_name') }}' ,\n\t\t\t'REASON_CD', '{{ var('kiwi_trans_header_reason_cd') }}',\n\t\t\t'RECORD_DELETED_FLAG', 'N',\n\t\t\t'RECORD_ID', MD5(SRC.TRANSACTION_ID),\n\t\t\t'DQ_AUDIT', SRC.DQ_AUDIT\n\t\t\t)\n\t\t) AS TECHNICAL_METADATA\n        ,SRC.R10_TRANSACTION_ID\n\t\t,SRC.LOAD_TS AS ASPIRE_ARRIVAL_TS\n  FROM (\n        SELECT\n\t\t       LOAD_TS\n              ,STORE_ID\n \t\t      ,TRANSACTION_ID\n \t\t      ,TENDERS\n \t\t      ,TRANSACTION_END_TS\n \t\t      ,TRANSACTION_PROVIDER_NAME\n \t\t      ,TRANSACTION_STATUS\n \t\t      ,GROSS_AMOUNT\n \t\t      ,NET_AMOUNT\n \t\t      ,TOTAL_SAVINGS_AMOUNT\n \t\t      ,PURCHASE_QUANTITY\n \t\t      ,PRIMARY_ENTITY_ID\n              ,R10_TRANSACTION_ID\n \t\t      ,ITEMS\n \t\t      ,SALES_CHANNEL_NAME\n \t\t      ,ORDER_NUMBER\n \t\t      ,TRANSACTION_LINKS\n \t\t      ,Coupons\n \t\t      ,DQ_AUDIT\n \t     FROM  {{ ref('raw_osts_trans') }}  raw_osts_trans\n       ) SRC\n  WHERE NOT EXISTS (SELECT 1 \n                      FROM ADW_RDV.SALE_TRANSACTION_HEADER_STSSLS_LINK DEST\n\t\t\t\t\t WHERE DEST.TRANSACTION_ID = SRC.TRANSACTION_ID  \n\t\t\t\t\t   AND DEST.PRIMARY_ENTITY_ID = SRC.PRIMARY_ENTITY_ID \n\t\t\t\t\t   AND DEST.STORE_NK1 = SRC.STORE_ID \n\t\t\t\t\t   AND DEST.SOURCE_SYSTEM_CD = '{{ var('kiwi_source_system_cd') }}' \n\t\t\t\t\t   AND DEST.REASON_CD = '{{ var('kiwi_trans_header_reason_cd') }}'  \n                    )", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "raw_osts_trans_header_v"], "unique_id": "model.kiwi_dbt.raw_osts_trans_header_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_trans_header_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_trans_header_v.sql", "name": "raw_osts_trans_header_v", "alias": "raw_osts_trans_header_v", "checksum": {"name": "sha256", "checksum": "da3323c086932d1240e479ce5042076abbcfd2dad3bf3bed070592474633c539"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_trans_item_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\t    \n\t\t\n    )\n}}\n         SELECT\n\t\t       LOAD_TS\n\t\t      ,STORE_ID\n\t\t      ,TRANSACTION_ID\n\t\t      ,TRANSACTION_END_TS\n\t\t      ,TRANSACTION_STATUS\n\t\t      ,PRIMARY_ENTITY_ID\n\t\t      ,ITEM.VALUE:SequenceNumber AS ITEM_SEQUENCE_NUMBER\n\t\t      ,ITEM.VALUE:SKU AS SKU\n\t\t      ,ITEM.VALUE:EAN AS EAN\n\t\t      ,ITEM.VALUE:Quantity AS ITEM_QUANTITY\n\t\t      ,ITEM.VALUE:UnitOfMeasure AS UNIT_OF_MEASURE\n\t\t      ,ITEM.VALUE:RegularSalesUnitPrice:Amount AS REGULAR_UNIT_PRICE_AMOUNT\n\t\t      ,ITEM.VALUE:ActualSalesUnitPrice:Amount AS ACTUAL_UNIT_PRICE_AMOUNT\n\t\t      ,ITEM.VALUE:ExtendedAmount:Amount AS EXTENDED_PRICE_AMOUNT\n\t\t      ,ITEM.VALUE:ExtendedDiscountAmount:Amount AS EXTENDED_DISCOUNT_AMOUNT\n\t\t      ,ITEM.VALUE:ItemType AS ITEM_TYPE\n\t\t      ,DQ_AUDIT\n\t     FROM {{ ref('raw_osts_trans') }}   raw_osts_trans,\n\t          LATERAL FLATTEN(input => ITEMS) AS ITEM", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "raw_osts_trans_item_v"], "unique_id": "model.kiwi_dbt.raw_osts_trans_item_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_trans_item_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_trans_item_v.sql", "name": "raw_osts_trans_item_v", "alias": "raw_osts_trans_item_v", "checksum": {"name": "sha256", "checksum": "2a2ef78b8885ce82ee984cae8abe4b2bffb90d9140ef2472440116642a1276e6"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_trans_link_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n    )\n}}\n\n\nSELECT\n         LOAD_TS\n        ,STORE_ID\n        ,TRANSACTION_ID\n        ,TRANSACTION_END_TS\n        ,TRANSACTION_STATUS\n        ,PRIMARY_ENTITY_ID\n        ,TRANSACTION_LINK.VALUE:StoreID AS LINKED_STORE_ID\n        ,TRANSACTION_LINK.VALUE:TransactionID AS LINKED_TRANSACTION_ID\n        ,TRANSACTION_LINK.VALUE:EndDateTime AS LINKED_TRANSACTION_END_TS\n        ,TRANSACTION_LINK.VALUE:BusinessDayDate AS LINKED_BUSINESS_DAY_DATE\n        ,DQ_AUDIT\n    FROM {{ ref('raw_osts_trans') }}   raw_osts_trans,\n    LATERAL FLATTEN(input => TRANSACTION_LINKS) AS TRANSACTION_LINK", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "raw_osts_trans_link_v"], "unique_id": "model.kiwi_dbt.raw_osts_trans_link_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_trans_link_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_trans_link_v.sql", "name": "raw_osts_trans_link_v", "alias": "raw_osts_trans_link_v", "checksum": {"name": "sha256", "checksum": "9722a7fa1379987c3d8917861dfbb71117849f2fb2b999a0b2ccd1f074e293d0"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_trans_payment_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n    )\n}}\n\n\n\n      SELECT a.LOAD_TS,\n             a.STORE_ID,\n             a.TRANSACTION_ID,\n\t         a.TRANSACTION_END_TS,\n\t         a.TRANSACTION_STATUS,\n\t         a.PRIMARY_ENTITY_ID,\n\t         a.PAYMENT_SEQUENCE_NUMBER,\n\t         a.CURRENCY,\n\t         a.TENDER_AMOUNT,\n\t         a.TENDER_TYPE_ID,\n\t         a.PAYMENT_SERVICE_PROVIDER,\n\t         a.TENDER_CHANGE_AMOUNT,\n\t         a.FACE_AMOUNT,\n\t         a.PROMOTIONID,\n             a.FACE_CURRENCY,\n             a.TENDER_CHANGE_CURRENCY,\n             b.BARCODE_NUMBER,\n\t         b.REWARD_TYPE,\n\t\t\t a.DQ_AUDIT\n        FROM(\n\t         SELECT\n                    LOAD_TS\n\t\t           ,STORE_ID\n\t\t           ,TRANSACTION_END_TS\n\t\t           ,TRANSACTION_ID\n\t\t           ,TRANSACTION_STATUS\n\t\t           ,PRIMARY_ENTITY_ID\n\t\t           ,TENDER.INDEX AS PAYMENT_SEQUENCE_NUMBER\n\t\t           ,COALESCE(TENDER.VALUE:Amount:Currency, '~~') AS CURRENCY\n\t\t           ,TENDER.VALUE:Amount:Amount AS TENDER_AMOUNT\n\t\t           ,TENDER.VALUE:TenderTypeID AS TENDER_TYPE_ID\n\t\t           ,TENDER.VALUE:PSP AS PAYMENT_SERVICE_PROVIDER\n\t\t           ,TENDER.VALUE:TenderChange:Amount AS TENDER_CHANGE_AMOUNT\n\t\t           ,TENDER.VALUE:FaceAmount:Amount AS FACE_AMOUNT\n\t\t           ,TENDER.VALUE:PromotionID::string AS PROMOTIONID\n                   ,TENDER.VALUE:FaceAmount:Currency::string AS FACE_CURRENCY\n                   ,TENDER.VALUE:TenderChange:Currency::string AS TENDER_CHANGE_CURRENCY\n\t\t           ,DQ_AUDIT\n\t          FROM {{ ref('raw_osts_trans') }}  raw_osts_trans,\n\t               LATERAL FLATTEN(input => TENDERS) AS TENDER\n\t\t     ) a\n             LEFT JOIN (SELECT BARCODE_NUMBER\n                              ,promotion_id\n                              ,REWARD_TYPE\n                              ,PRIMARY_ENTITY_ID \n                          from {{ ref('raw_osts_trans_coupon') }}  ) b\n               on a.PROMOTIONID = b.PROMOTION_ID and  a.PRIMARY_ENTITY_ID=b.PRIMARY_ENTITY_ID", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans", "model.kiwi_dbt.raw_osts_trans_coupon"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "raw_osts_trans_payment_v"], "unique_id": "model.kiwi_dbt.raw_osts_trans_payment_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_trans_payment_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_trans_payment_v.sql", "name": "raw_osts_trans_payment_v", "alias": "raw_osts_trans_payment_v", "checksum": {"name": "sha256", "checksum": "d79ec21051c7927330a1286c9c1220b2fe6bf450f0574edf9a4020b0933d2fb9"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans"], ["raw_osts_trans_coupon"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_trans_tender_reward_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN',\n    )\n}}\n\n\n\nSELECT  PROMO.LOAD_TS\n\t\t,PROMO.STORE_ID                    AS STORE_NK1\n        ,'~~'                              AS STORE_NK2\n\t\t,'~~'                              AS STORE_NK3\n\t\t,PROMO.TRANSACTION_ID              AS TRANSACTION_ID\n\t\t,PROMO.TRANSACTION_END_TS          AS TRANSACTION_END_TS\n\t\t,PROMO.TRANSACTION_STATUS\n\t\t,PROMO.PRIMARY_ENTITY_ID\n        ,PROMO.TRANSACTION_PROVIDER_NAME\n\t\t,PROMO.ITEM_SEQUENCE_NUMBER        AS ITEM_SEQUENCE_NUMBER\n\t\t,PROMO.SKU                         AS ITEM_NK1\n        ,'~~'                              AS ITEM_NK2\n\t\t,'~~'                              AS ITEM_NK3\n\t\t,PROMO.PROMOTION_ID                AS PROMOTION_NK1\n        ,'~~'                              AS PROMOTION_NK2\n\t\t,'~~'                              AS PROMOTION_NK3\n        ,'{{ var('kiwi_source_system_cd') }}'               AS SOURCE_SYSTEM_CD\n        ,'{{var('kiwi_trans_item_tender_reason_cd')}}'      AS REASON_CD\n\t\t,PROMO.PROMOTION_DESCRIPTION\n\t\t,PROMO.PROMOTION_Type\n\t\t,PROMO.PROMOTION_Value             AS REWARD_AMOUNT\n\t\t,PROMO.DQ_AUDIT \n        ,pay.barcode_number                AS COUPON_NK1\n        ,'~~'                              AS COUPON_NK2\n\t\t,'~~'                              AS COUPON_NK3\n        ,nvl(pay.REWARD_TYPE,'Monetary')   AS REWARD_TYPE\n        ,pay.TENDER_TYPE_ID                AS TENDER_TYPE_ID\n        ,pay.PAYMENT_SEQUENCE_NUMBER       AS TENDER_REWARD_SEQUENCE_NUMBER\n        ,TO_VARIANT(OBJECT_CONSTRUCT\n\t\t\t(\n\t\t\t'BATCH_ID', {{var('kiwi_current_load_time')}} ,\n\t\t\t'EFFECTIVE_FROM_TS', PROMO.TRANSACTION_END_TS,\n\t\t\t'JOB_NAME', 'CDL_sts_to_RDV_sale_trans_tender_reward_stssls_link',\n\t\t\t'REASON_CD', '{{var('kiwi_trans_item_tender_reason_cd')}}' ,\n\t\t\t'DQ_AUDIT', PROMO.DQ_AUDIT,\n\t\t\t'LOAD_TS', PROMO.LOAD_TS\n\t\t\t)\n\t\t) AS TECHNICAL_METADATA\n    FROM {{ ref('raw_osts_item_promo') }} promo \n    left join {{ ref('raw_osts_trans_payment') }} pay\n      on promo.promotion_id=pay.promotionid  \n     and promo.PRIMARY_ENTITY_ID=pay.PRIMARY_ENTITY_ID\n   WHERE NOT EXISTS (SELECT 1 \n                       FROM ADW_RDV.SALE_TRANSACTION_TENDER_REWARD_STSSLS_LINK DEST\n                      WHERE DEST.TRANSACTION_ID = PROMO.TRANSACTION_ID \n                        AND\tDEST.STORE_NK1 = PROMO.STORE_ID\n                        AND DEST.PROMOTION_NK1=PROMO.PROMOTION_ID  \n                        AND DEST.SOURCE_SYSTEM_CD = '{{ var('kiwi_source_system_cd') }}')", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_item_promo", "model.kiwi_dbt.raw_osts_trans_payment"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "raw_osts_trans_tender_reward_v"], "unique_id": "model.kiwi_dbt.raw_osts_trans_tender_reward_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_trans_tender_reward_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_trans_tender_reward_v.sql", "name": "raw_osts_trans_tender_reward_v", "alias": "raw_osts_trans_tender_reward_v", "checksum": {"name": "sha256", "checksum": "c868a09c619672caae7939630c9f50825e65a8a11f0c92f9f724ff413a9aad22"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_item_promo"], ["raw_osts_trans_payment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.raw_osts_trans_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN',\n    )\n    }}\n\nSELECT\n       ANY_VALUE(LOAD_TS) AS LOAD_TS\n      ,RECORD_CONTENT:StoreID AS STORE_ID\n      ,ANY_VALUE(RECORD_CONTENT:StsTransactionID) AS TRANSACTION_ID\n      ,ANY_VALUE(RECORD_CONTENT:Tenders) AS TENDERS\n      ,ANY_VALUE(DATEADD(MS, RECORD_CONTENT:EndDateTime, '1970-01-01'))::timestamp_ntz AS TRANSACTION_END_TS\n      ,ANY_VALUE(RECORD_CONTENT:Source) AS TRANSACTION_PROVIDER_NAME\n      ,ANY_VALUE(RECORD_CONTENT:TransactionStatus) AS TRANSACTION_STATUS\n      ,ANY_VALUE(RECORD_CONTENT:Totals:TransactionGrossAmount:Amount) AS GROSS_AMOUNT\n      ,ANY_VALUE(RECORD_CONTENT:Totals:TransactionNetAmount:Amount) AS NET_AMOUNT\n      ,ANY_VALUE(RECORD_CONTENT:Totals:TransactionTotalSavings:Amount) AS TOTAL_SAVINGS_AMOUNT\n      ,ANY_VALUE(RECORD_CONTENT:Totals:TransactionPurchaseQuantity) AS PURCHASE_QUANTITY\n      ,RECORD_CONTENT:PrimaryEntityID AS PRIMARY_ENTITY_ID\n      ,RECORD_METADATA:headers:STS_HEADERS:r10TransactionId AS R10_TRANSACTION_ID\n      ,ANY_VALUE(RECORD_CONTENT:Items) AS ITEMS\n \t  ,ANY_VALUE(RECORD_CONTENT:SalesChannel:Name) AS SALES_CHANNEL_NAME\n \t  ,ANY_VALUE(RECORD_CONTENT:OrderNumber) AS ORDER_NUMBER\n \t  ,ANY_VALUE(RECORD_CONTENT:TransactionLinks) AS TRANSACTION_LINKS\n \t  ,ANY_VALUE(RECORD_CONTENT:Coupons) AS Coupons\n \t  ,SUBSTR(ARRAY_TO_STRING(ANY_VALUE(RECORD_CONTENT:DataQuality.list)::ARRAY, ','),1,5000) AS DQ_AUDIT\n FROM {{source ('ADW_STAGE', 'OSTS_RAW_SALES_TRAN_STAGE_NEW')}} OSTS_RAW_SALES_TRAN_STAGE_NEW\nWHERE PRIMARY_ENTITY_ID||R10_TRANSACTION_ID NOT IN (SELECT PRIMARY_ENTITY_ID||R10_TRANSACTION_ID FROM ADW_RDV.SALE_TRANSACTION_HEADER_STSSLS_LINK WHERE PRIMARY_ENTITY_ID IS NOT NULL AND R10_TRANSACTION_ID IS NOT NULL)\nGROUP BY PRIMARY_ENTITY_ID, R10_TRANSACTION_ID, STORE_ID", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.kiwi_dbt.ADW_STAGE.OSTS_RAW_SALES_TRAN_STAGE_NEW"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "raw_osts_trans_v"], "unique_id": "model.kiwi_dbt.raw_osts_trans_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_trans_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\raw_osts_trans_v.sql", "name": "raw_osts_trans_v", "alias": "raw_osts_trans_v", "checksum": {"name": "sha256", "checksum": "28920386c59087f93752cc62bbf1254db894c3b9571609e5535c4c3d2ddcf24c"}, "tags": ["KIWI_RDV"], "refs": [], "sources": [["ADW_STAGE", "OSTS_RAW_SALES_TRAN_STAGE_NEW"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_item_base_br_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\t    \n\t\t\n    )\n}}\n \n\n\n\nSELECT SRC.STORE_ID                      AS STORE_NK1\n\t\t,'~~'                            AS STORE_NK2\n\t\t,'~~'                            AS STORE_NK3\n\t\t,SRC.TRANSACTION_ID              AS TRANSACTION_ID\n\t\t,SRC.ITEM_SEQUENCE_NUMBER        AS ITEM_SEQUENCE_NUMBER\n\t\t,SRC.SKU                         AS ITEM_NK1\n\t\t,'~~'                            AS ITEM_NK2\n\t\t,'~~'                            AS ITEM_NK3\n\t\t,SRC.EAN                         AS EAN_NK1\n\t\t,'~~'                            AS EAN_NK2\n\t\t,'~~'                            AS EAN_NK3\n\t\t,SRC.ITEM_QUANTITY               AS ITEM_QUANTITY\n\t\t,SRC.UNIT_OF_MEASURE             AS UOM_NK1\n\t\t,'~~'                            AS UOM_NK2\n\t\t,'~~'                            AS UOM_NK3\n\t\t,SRC.REGULAR_UNIT_PRICE_AMOUNT   AS POS_BASE_UNIT_PRICE_AMOUNT\n\t\t,SRC.ACTUAL_UNIT_PRICE_AMOUNT    AS ACTUAL_UNIT_PRICE_AMOUNT\n\t\t,IFF(SRC.ITEM_TYPE = 'Return', -1, 1) * SRC.EXTENDED_PRICE_AMOUNT    AS EXTENDED_PRICE_AMOUNT\n\t\t,SRC.EXTENDED_DISCOUNT_AMOUNT    AS EXTENDED_DISCOUNT_AMOUNT\n\t\t,SRC.ITEM_TYPE                   AS ITEM_TYPE\n\t\t,SRC.TRANSACTION_END_TS          AS TRANSACTION_END_TS\n\t\t,SRC.TRANSACTION_STATUS          AS TRANSACTION_STATUS\n\t\t,SRC.BASE_PRICE_AMT              AS BASE_UNIT_PRICE_AMOUNT\n\t\t,SRC.PRIMARY_ENTITY_ID           AS PRIMARY_ENTITY_ID\n\t\t,IFF(SRC.ITEM_TYPE = 'Return', SRC.LINKED_STORE_ID, NULL)  AS PURCHASE_TRANSACTION_STORE_NK1\n\t\t,IFF(SRC.ITEM_TYPE = 'Return', '~~', NULL)                 AS PURCHASE_TRANSACTION_STORE_NK2\n\t\t,IFF(SRC.ITEM_TYPE = 'Return', '~~', NULL)                 AS PURCHASE_TRANSACTION_STORE_NK3\n\t\t,IFF(SRC.ITEM_TYPE = 'Return', SRC.LINKED_TRANSACTION_ID, NULL)  AS PURCHASE_TRANSACTION_SOURCE_ID\n\t\t,IFF(SRC.ITEM_TYPE = 'Return', SRC.LINKED_TRANSACTION_END_TS, NULL) AS PURCHASE_TRANSACTION_END_TS\n\t\t,TO_VARIANT(OBJECT_CONSTRUCT\n\t\t\t(\n\t\t\t'LOAD_TS', SRC.LOAD_TS,\n\t\t\t'BATCH_ID', {{ var('kiwi_current_load_time') }},\n\t\t\t'EFFECTIVE_FROM_TS', SRC.TRANSACTION_END_TS,\n\t\t\t'JOB_NAME', '{{ var('kiwi_job_name')}}'  ,\n\t\t\t'SOURCE_SYSTEM_CD', '{{ var('kiwi_source_system_cd')}}' ,\n\t\t\t'REASON_CD', '{{ var('kiwi_trans_item_reason_cd')}}' ,\n\t\t\t'RECORD_DELETED_FLAG', 'N',\n\t\t\t'RECORD_ID', MD5(CONCAT(SRC.TRANSACTION_ID, SRC.ITEM_SEQUENCE_NUMBER)),\n\t\t\t'DQ_AUDIT', SRC.DQ_AUDIT\n\t\t\t) ) AS TECHNICAL_METADATA\n    FROM (\n\t\t   SELECT TRAN_ITEM.*, \n                  ITEM_STORE_PRICE.BASE_PRICE_AMT, \n                  LINK.LINKED_STORE_ID, \n                  LINK.LINKED_TRANSACTION_ID, \n                  LINK.LINKED_TRANSACTION_END_TS\n\t\t     FROM {{ ref('raw_osts_trans_item') }}  TRAN_ITEM\n\t\t     LEFT JOIN (\n\t\t\t             SELECT STORE_CD, \n                                ITEM_CD, \n                                VALID_FROM_DT, \n                                VALID_UNTIL_DT, \n                                BASE_PRICE_AMT\n\t\t\t               FROM {{source('ADW_BDV', 'ITEM_STORE_PRICE_BR')}} ITEM_STORE_PRICE_BR\n\t\t\t           ) ITEM_STORE_PRICE \n               ON  TRAN_ITEM.STORE_ID = ITEM_STORE_PRICE.STORE_CD \n              AND  TO_NUMBER(TRAN_ITEM.SKU) = ITEM_STORE_PRICE.ITEM_CD \n              AND  TRAN_ITEM.TRANSACTION_END_TS BETWEEN ITEM_STORE_PRICE.VALID_FROM_DT AND ITEM_STORE_PRICE.VALID_UNTIL_DT\n\t\t     LEFT JOIN (\n\t\t\t             SELECT TRANSACTION_ID, \n                                STORE_ID, \n                                LINKED_STORE_ID, \n                                LINKED_TRANSACTION_ID, \n                                LINKED_TRANSACTION_END_TS\n\t\t\t               FROM {{ ref('raw_osts_trans_link') }} RAW_OSTS_TRANS_LINK_TMP\n\t\t\t           ) LINK \n              ON  LINK.TRANSACTION_ID = TRAN_ITEM.TRANSACTION_ID \n             AND  LINK.STORE_ID = TRAN_ITEM.STORE_ID\n\t      ) SRC\n  WHERE NOT EXISTS (SELECT 1  \n                      FROM ADW_BDV.SALE_TRANSACTION_ITEM_BASE_BR DEST\n                     WHERE DEST.TRANSACTION_ID = SRC.TRANSACTION_ID \n                       AND DEST.PRIMARY_ENTITY_ID = SRC.PRIMARY_ENTITY_ID \n                       AND DEST.STORE_NK1 = SRC.STORE_ID \n                       AND DEST.ITEM_SEQUENCE_NUMBER = SRC.ITEM_SEQUENCE_NUMBER \n                       AND DEST.TRANSACTION_END_TS = SRC.TRANSACTION_END_TS                       \n                   )", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.kiwi_dbt.ADW_BDV.ITEM_STORE_PRICE_BR", "model.kiwi_dbt.raw_osts_trans_item", "model.kiwi_dbt.raw_osts_trans_link"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "sale_transaction_item_base_br_v"], "unique_id": "model.kiwi_dbt.sale_transaction_item_base_br_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\sale_transaction_item_base_br_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\sale_transaction_item_base_br_v.sql", "name": "sale_transaction_item_base_br_v", "alias": "sale_transaction_item_base_br_v", "checksum": {"name": "sha256", "checksum": "db6217cb627d40d9f33904e153d69eeb3662f5ff15c8661eac1df88946c74843"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans_item"], ["raw_osts_trans_link"]], "sources": [["ADW_BDV", "ITEM_STORE_PRICE_BR"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_item_price_modifier_stssls_link_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\n    )\n}}\n\n\nSELECT SRC.STORE_ID                          AS STORE_NK1\n\t\t,'~~'                                AS STORE_NK2\n\t\t,'~~'                                AS STORE_NK3\n\t\t,SRC.TRANSACTION_ID                  AS TRANSACTION_ID\n\t\t,SRC.ITEM_SEQUENCE_NUMBER            AS ITEM_SEQUENCE_NUMBER\n\t\t,SRC.MODIFIER_SEQUENCE_NUMBER        AS MODIFIER_SEQUENCE_NUMBER\n\t\t,SRC.MODIFIER_TYPE                   AS MODIFIER_TYPE\n\t\t,SRC.MODIFIER_REASON_CODE            AS MODIFIER_REASON_CODE\n\t\t,SRC.MODIFIER_ACTION                 AS MODIFIER_ACTION\n\t\t,SRC.MODIFIER_AMOUNT                 AS MODIFIER_AMOUNT\n\t\t,SRC.PROMOTION_ID                    AS PROMOTION_ID\n\t\t,SRC.PROMOTION_DESCRIPTION           AS PROMOTION_DESCRIPTION\n\t\t,SRC.PREVIOUS_PRICE_AMOUNT           AS PREVIOUS_PRICE_AMOUNT\n\t\t,SRC.APPORTIONED_AMOUNT              AS APPORTIONED_AMOUNT\n\t\t,SRC.PROMOTION_PARTICIPATOR          AS PROMOTION_PARTICIPATOR\n\t\t,SRC.SKU                             AS ITEM_NK1\n\t\t,'~~'                                AS ITEM_NK2\n\t\t,'~~'                                AS ITEM_NK3\n\t\t,SRC.TRANSACTION_END_TS              AS TRANSACTION_END_TS\n\t\t,'{{ var('kiwi_source_system_cd') }}'                   AS SOURCE_SYSTEM_CD\n\t\t,'{{ var('kiwi_item_price_modifier_reason_cd')}}'      AS REASON_CD\n\t\t,TO_VARIANT(OBJECT_CONSTRUCT\n\t\t\t(\n\t\t\t'LOAD_TS', SRC.LOAD_TS,\n\t\t\t'BATCH_ID', {{ var('kiwi_current_load_time') }},\n\t\t\t'EFFECTIVE_FROM_TS', SRC.TRANSACTION_END_TS,\n\t\t\t'JOB_NAME', '{{ var('kiwi_job_name')}}' ,\n\t\t\t'REASON_CD', '{{ var('kiwi_item_price_modifier_reason_cd')}}',\n\t\t\t'RECORD_DELETED_FLAG', 'N',\n\t\t\t'RECORD_ID', MD5(CONCAT(SRC.TRANSACTION_ID, SRC.MODIFIER_SEQUENCE_NUMBER)),\n\t\t\t'DQ_AUDIT', SRC.DQ_AUDIT\n\t\t\t)\n\t\t) AS TECHNICAL_METADATA\n  FROM (\n\t    SELECT\n\t\t       LOAD_TS\n\t\t      ,STORE_ID\n\t\t      ,TRANSACTION_ID\n\t\t      ,TRANSACTION_END_TS\n\t\t      ,TRANSACTION_STATUS\n\t\t      ,PRIMARY_ENTITY_ID\n\t\t      ,ITEM_SEQUENCE_NUMBER\n\t\t      ,SKU\n\t\t      ,MODIFIER_SEQUENCE_NUMBER\n\t\t      ,MODIFIER_TYPE\n\t\t      ,MODIFIER_REASON_CODE\n\t\t      ,MODIFIER_ACTION\n\t\t      ,MODIFIER_AMOUNT\n\t\t      ,PROMOTION_ID\n\t\t      ,PROMOTION_DESCRIPTION\n\t\t      ,PREVIOUS_PRICE_AMOUNT\n\t\t      ,PROMOTION_PARTICIPATOR\n\t\t      ,APPORTIONED_AMOUNT\n\t\t      ,DQ_AUDIT\n\t      FROM {{ ref('raw_osts_item_price_modifier') }}   raw_osts_item_price_modifier\n       )  SRC\nWHERE NOT EXISTS (SELECT 1 \n                    FROM ADW_RDV.SALE_TRANSACTION_ITEM_PRICE_MODIFIER_STSSLS_LINK DEST\n\t\t\t\t   WHERE DEST.TRANSACTION_ID = SRC.TRANSACTION_ID \n\t\t\t\t     AND DEST.STORE_NK1 = SRC.STORE_ID \n\t\t\t\t\t AND DEST.ITEM_SEQUENCE_NUMBER = SRC.ITEM_SEQUENCE_NUMBER \n\t\t\t\t\t AND DEST.MODIFIER_SEQUENCE_NUMBER = SRC.MODIFIER_SEQUENCE_NUMBER \n\t\t\t\t\t AND DEST.SOURCE_SYSTEM_CD = '{{ var('kiwi_source_system_cd') }}'  \n\t\t\t\t\t AND DEST.REASON_CD = '{{ var('kiwi_item_price_modifier_reason_cd')}}'\n\t\t\t\t   )", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_item_price_modifier"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "sale_transaction_item_price_modifier_stssls_link_v"], "unique_id": "model.kiwi_dbt.sale_transaction_item_price_modifier_stssls_link_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\sale_transaction_item_price_modifier_stssls_link_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\sale_transaction_item_price_modifier_stssls_link_v.sql", "name": "sale_transaction_item_price_modifier_stssls_link_v", "alias": "sale_transaction_item_price_modifier_stssls_link_v", "checksum": {"name": "sha256", "checksum": "67ed6136fc0271a2f835b81872f773679344790c9364c5c0c2661f86ede3937e"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_item_price_modifier"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_item_stssls_link_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n\t\t    \n\t\t\n    )\n}}\n \n SELECT\n        SRC.STORE_ID                AS  STORE_NK1\n\t\t,'~~'                        AS  STORE_NK2\n\t\t,'~~'                        AS  STORE_NK3\n\t\t,SRC.TRANSACTION_ID          AS  TRANSACTION_ID\n\t\t,SRC.ITEM_SEQUENCE_NUMBER    AS  ITEM_SEQUENCE_NUMBER\n\t\t,SRC.SKU                     AS  ITEM_NK1\n\t\t,'~~'                        AS  ITEM_NK2\n\t\t,'~~'                        AS  ITEM_NK3\n\t\t,SRC.EAN                     AS  EAN_NK1\n\t\t,'~~'                        AS  EAN_NK2\n\t\t,'~~'                        AS  EAN_NK3\n\t\t,SRC.ITEM_QUANTITY           AS  ITEM_QUANTITY\n\t\t,SRC.UNIT_OF_MEASURE         AS  UOM_NK1\n\t\t,'~~'                        AS  UOM_NK2\n\t\t,'~~'                        AS  UOM_NK3\n\t\t,SRC.REGULAR_UNIT_PRICE_AMOUNT   AS REGULAR_UNIT_PRICE_AMOUNT\n\t\t,SRC.ACTUAL_UNIT_PRICE_AMOUNT    AS ACTUAL_UNIT_PRICE_AMOUNT\n\t\t,SRC.EXTENDED_PRICE_AMOUNT       AS EXTENDED_PRICE_AMOUNT\n\t\t,SRC.EXTENDED_DISCOUNT_AMOUNT    AS EXTENDED_DISCOUNT_AMOUNT\n\t\t,SRC.ITEM_TYPE                   AS ITEM_TYPE\n\t\t, '{{ var('kiwi_source_system_cd') }}'               AS SOURCE_SYSTEM_CD\n\t\t, '{{ var('kiwi_trans_item_reason_cd') }}'           AS REASON_CD\n\t\t,TO_VARIANT(OBJECT_CONSTRUCT\n\t\t\t(\n\t\t\t'LOAD_TS', SRC.LOAD_TS,\n\t\t\t'BATCH_ID', {{ var('kiwi_current_load_time') }} ,\n\t\t\t'EFFECTIVE_FROM_TS', SRC.TRANSACTION_END_TS,\n\t\t\t'JOB_NAME', '{{ var('kiwi_job_name') }}' ,\n\t\t\t'SOURCE_SYSTEM_CD', '{{ var('kiwi_source_system_cd') }}'  ,\n\t\t\t'REASON_CD', '{{ var('kiwi_trans_item_reason_cd') }}' ,\n\t\t\t'RECORD_DELETED_FLAG', 'N',\n\t\t\t'RECORD_ID', MD5(CONCAT(SRC.TRANSACTION_ID, SRC.ITEM_SEQUENCE_NUMBER)),\n\t\t\t'DQ_AUDIT', SRC.DQ_AUDIT\n\t\t\t)\n\t\t) TECHNICAL_METADATA \n   FROM (\n         SELECT\n\t\t       LOAD_TS\n\t\t      ,STORE_ID\n\t\t      ,TRANSACTION_ID\n\t\t      ,TRANSACTION_END_TS\n\t\t      ,TRANSACTION_STATUS\n\t\t      ,PRIMARY_ENTITY_ID\n\t\t      ,ITEM_SEQUENCE_NUMBER\n\t\t      ,SKU\n\t\t      ,EAN\n\t\t      ,ITEM_QUANTITY\n\t\t      ,UNIT_OF_MEASURE\n\t\t      ,REGULAR_UNIT_PRICE_AMOUNT\n\t\t      ,ACTUAL_UNIT_PRICE_AMOUNT\n\t\t      ,EXTENDED_PRICE_AMOUNT\n\t\t      ,EXTENDED_DISCOUNT_AMOUNT\n\t\t      ,ITEM_TYPE\n\t\t      ,DQ_AUDIT\n\t     FROM {{ ref('raw_osts_trans_item') }}   raw_osts_trans_item\n       ) SRC\n  WHERE NOT EXISTS (SELECT 1 \n                      FROM ADW_RDV.SALE_TRANSACTION_ITEM_STSSLS_LINK DEST\n\t\t\t\t\t WHERE DEST.TRANSACTION_ID = SRC.TRANSACTION_ID \n\t\t\t\t\t   AND DEST.STORE_NK1 = SRC.STORE_ID \n\t\t\t\t\t   AND DEST.ITEM_SEQUENCE_NUMBER = SRC.ITEM_SEQUENCE_NUMBER \n\t\t\t\t\t   AND DEST.SOURCE_SYSTEM_CD = '{{ var('kiwi_source_system_cd') }}'    \n\t\t\t\t\t   AND DEST.REASON_CD = '{{ var('kiwi_trans_payment_reason_cd') }}'   \n                )", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans_item"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "sale_transaction_item_stssls_link_v"], "unique_id": "model.kiwi_dbt.sale_transaction_item_stssls_link_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\sale_transaction_item_stssls_link_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\sale_transaction_item_stssls_link_v.sql", "name": "sale_transaction_item_stssls_link_v", "alias": "sale_transaction_item_stssls_link_v", "checksum": {"name": "sha256", "checksum": "ba82fce8c75ae0da1301c334b177aaa461803e2f1df63dfe4a96bf0f77afaff9"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans_item"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_link_stssls_link_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n    )\n}}\n\nSELECT SRC.LINKED_STORE_ID                                 AS STORE_NK1\n\t\t,'~~'                                              AS STORE_NK2\n\t\t,'~~'                                              AS STORE_NK3\n\t\t,COALESCE(SRC.TRANSACTION_ID, '~~')                AS TRANSACTION_ID\n\t\t,SRC.TRANSACTION_END_TS                            AS TRANSACTION_END_TS\n\t\t,SRC.PRIMARY_ENTITY_ID                             AS PRIMARY_ENTITY_ID\n\t\t,SRC.LINKED_STORE_ID                               AS LINKED_STORE_NK1\n\t\t,'~~'                                              AS LINKED_STORE_NK2\n\t\t,'~~'                                              AS LINKED_STORE_NK3\n\t\t,LINKED_TRANSACTION_ID                             AS LINKED_SOURCE_TRANSACTION_ID                \n\t\t,SRC.LINKED_TRANSACTION_END_TS                     AS LINKED_TRANSACTION_END_TS\n\t\t,'{{ var('kiwi_source_system_cd')}}'               AS SOURCE_SYSTEM_CD\n\t\t,'{{ var('kiwi_trans_item_reason_cd')}}'           AS REASON_CD\n\t\t,TO_VARIANT(OBJECT_CONSTRUCT\n\t\t\t(\n\t\t\t'LOAD_TS', SRC.LOAD_TS,\n\t\t\t'BATCH_ID', {{ var('kiwi_current_load_time')}}  ,\n\t\t\t'EFFECTIVE_FROM_TS', SRC.TRANSACTION_END_TS,\n\t\t\t'JOB_NAME', '{{ var('kiwi_job_name')}}'  ,\n\t\t\t'REASON_CD', '{{ var('kiwi_trans_header_reason_cd')}}' ,\n\t\t\t'RECORD_DELETED_FLAG', 'N',\n\t\t\t'RECORD_ID', MD5(SRC.TRANSACTION_ID),\n\t\t\t'DQ_AUDIT', SRC.DQ_AUDIT\n\t\t\t)\n\t\t)                                                 AS TECHNICAL_METADATA\n  FROM {{ ref('raw_osts_trans_link')}} SRC\n WHERE NOT EXISTS (SELECT 1\n                     FROM ADW_RDV.SALE_TRANSACTION_LINK_STSSLS_LINK DEST\n                    WHERE DEST.TRANSACTION_ID = SRC.TRANSACTION_ID \n                      AND DEST.PRIMARY_ENTITY_ID = SRC.PRIMARY_ENTITY_ID\n                      AND DEST.STORE_NK1 = SRC.STORE_ID \n                      AND DEST.LINKED_SOURCE_TRANSACTION_ID = SRC.LINKED_TRANSACTION_ID \n                      AND DEST.LINKED_STORE_NK1 = SRC.LINKED_STORE_ID \n                      AND DEST.SOURCE_SYSTEM_CD = '{{ var('kiwi_source_system_cd')}}'\n                      AND DEST.REASON_CD = '{{ var('kiwi_trans_item_reason_cd')}}' \n                      AND SRC.LINKED_STORE_ID IS NOT NULL \n                      AND SRC.LINKED_TRANSACTION_END_TS IS NOT NULL)", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans_link"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "sale_transaction_link_stssls_link_v"], "unique_id": "model.kiwi_dbt.sale_transaction_link_stssls_link_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\sale_transaction_link_stssls_link_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\sale_transaction_link_stssls_link_v.sql", "name": "sale_transaction_link_stssls_link_v", "alias": "sale_transaction_link_stssls_link_v", "checksum": {"name": "sha256", "checksum": "6ea5ace54c549126e8713277f3dfa376fe82bb77d6b9d311ffb88d6d6beee4f8"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans_link"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_payment_br_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \t\n    )\n}}\n\nSELECT SRC.STORE_ID                                   AS STORE_NK1\n\t\t,'~~'                                         AS STORE_NK2\n\t\t,'~~'                                         AS STORE_NK3\n\t\t,SRC.TRANSACTION_ID                           AS TRANSACTION_ID\n\t\t,SRC.PAYMENT_SEQUENCE_NUMBER                  AS PAYMENT_SEQUENCE_NUMBER\n\t\t,SRC.TRANSACTION_END_TS                       AS TRANSACTION_END_TS\n\t\t,SRC.TRANSACTION_STATUS                       AS TRANSACTION_STATUS\n\t\t,SRC.CURRENCY                                 AS CURRENCY_NK1\n\t\t,'~~'                                         AS CURRENCY_NK2\n\t\t,'~~'                                         AS CURRENCY_NK3\n\t\t,SRC.TENDER_TYPE_ID                           AS TENDER_TYPE_ID\n\t\t,SRC.FACE_AMOUNT                              AS FACE_AMOUNT\n\t\t,SRC.TENDER_AMOUNT                            AS TENDER_AMOUNT\n\t\t,SRC.TENDER_CHANGE_AMOUNT                     AS TENDER_CHANGE_AMOUNT\n\t\t,SRC.PAYMENT_SERVICE_PROVIDER                 AS PAYMENT_SERVICE_PROVIDER\n\t\t,SRC.PRIMARY_ENTITY_ID                        AS PRIMARY_ENTITY_ID\n\t\t,TO_VARIANT(OBJECT_CONSTRUCT\n\t\t\t(\n\t\t\t'LOAD_TS', SRC.LOAD_TS,\n\t\t\t'BATCH_ID', {{ var('kiwi_current_load_time') }},\n\t\t\t'EFFECTIVE_FROM_TS', SRC.TRANSACTION_END_TS,\n\t\t\t'JOB_NAME', '{{ var('kiwi_job_name') }}',\n\t\t\t'SOURCE_SYSTEM_CD', '{{ var('kiwi_source_system_cd') }}',\n\t\t\t'REASON_CD', '{{ var('kiwi_trans_item_reason_cd') }}',\n\t\t\t'RECORD_DELETED_FLAG', 'N',\n\t\t\t'RECORD_ID', MD5(CONCAT(SRC.TRANSACTION_ID, SRC.PAYMENT_SEQUENCE_NUMBER)),\n\t\t\t'DQ_AUDIT', SRC.DQ_AUDIT\n\t\t\t)\n\t\t)                                             AS TECHNICAL_METADATA\n\t    ,FLOOR(SRC.PROMOTIONID)                       AS PROMOTION_ID\n\t\t,SRC.BARCODE_NUMBER                           AS COUPON_NK1\n\t\t,SRC.FACE_CURRENCY                            AS FACE_AMOUNT_CURRENCY_NK1\n\t\t,SRC.TENDER_CHANGE_CURRENCY                   AS TENDER_CHANGE_CURRENCY_NK1\n   FROM {{ ref('raw_osts_trans_payment') }}  SRC\n  WHERE NOT EXISTS (SELECT 1 \n                      FROM ADW_BDV.SALE_TRANSACTION_PAYMENT_BR DEST  \n                     WHERE DEST.TRANSACTION_ID = SRC.TRANSACTION_ID \n                       AND DEST.PRIMARY_ENTITY_ID = SRC.PRIMARY_ENTITY_ID \n                       AND DEST.STORE_NK1 = SRC.STORE_ID \n                       AND DEST.PAYMENT_SEQUENCE_NUMBER = SRC.PAYMENT_SEQUENCE_NUMBER \n                       AND DEST.TRANSACTION_END_TS = SRC.TRANSACTION_END_TS)", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans_payment"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "sale_transaction_payment_br_v"], "unique_id": "model.kiwi_dbt.sale_transaction_payment_br_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\sale_transaction_payment_br_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\sale_transaction_payment_br_v.sql", "name": "sale_transaction_payment_br_v", "alias": "sale_transaction_payment_br_v", "checksum": {"name": "sha256", "checksum": "b6326e096d398ea5fcfab7ffb8ba8af6e6b2dceba8e5d3e3057d59fba2ccea4d"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans_payment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_payment_stssls_link_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n    )\n}}\n\n\n\n\n\nSELECT  SRC.STORE_ID                  AS STORE_NK1\n\t\t,'~~'                         AS STORE_NK2\n\t\t,'~~'                         AS STORE_NK3\n\t\t,SRC.TRANSACTION_ID           AS TRANSACTION_ID\n\t\t,SRC.PAYMENT_SEQUENCE_NUMBER  AS PAYMENT_SEQUENCE_NUMBER\n\t\t,SRC.CURRENCY                 AS CURRENCY_NK1\n\t\t,'~~'                         AS CURRENCY_NK2 \n\t\t,'~~'                         AS CURRENCY_NK3\n\t\t,SRC.TENDER_TYPE_ID           AS TENDER_TYPE_ID\n\t\t,SRC.TENDER_AMOUNT            AS TENDER_AMOUNT\n\t\t,SRC.PAYMENT_SERVICE_PROVIDER AS PAYMENT_SERVICE_PROVIDER\n\t\t,SRC.TENDER_CHANGE_AMOUNT     AS TENDER_CHANGE_AMOUNT\n\t\t,SRC.FACE_AMOUNT              AS FACE_AMOUNT\n\t\t,SRC.PROMOTIONID              AS PROMOTION_NK1\n\t\t,'~~'                         AS PROMOTION_NK2\n\t\t,'~~'                         AS PROMOTION_NK3\n\t\t,SRC.BARCODE_NUMBER           AS COUPON_NK1\n\t\t,'~~'                         AS COUPON_NK2\n\t\t,'~~'                         AS COUPON_NK3\n\t\t,SRC.FACE_CURRENCY            AS FACE_AMOUNT_CURRENCY_NK1\n\t\t,'~~'                         AS FACE_AMOUNT_CURRENCY_NK2\n\t\t,'~~'                         AS FACE_AMOUNT_CURRENCY_NK3\n\t\t,SRC.TENDER_CHANGE_CURRENCY   AS TENDER_CHANGE_CURRENCY_NK1\n\t\t,'~~'                         AS TENDER_CHANGE_CURRENCY_NK2\n\t\t,'~~'                         AS TENDER_CHANGE_CURRENCY_NK3\n\t\t,'{{ var('kiwi_source_system_cd')}}'           AS SOURCE_SYSTEM_CD\n\t\t,'{{ var('kiwi_trans_payment_reason_cd')}}'    AS REASON_CD\n\t\t,TO_VARIANT(OBJECT_CONSTRUCT\n\t\t\t(\n\t\t\t'LOAD_TS', SRC.LOAD_TS,\n\t\t\t'BATCH_ID', {{ var('kiwi_current_load_time')}},\n\t\t\t'EFFECTIVE_FROM_TS', SRC.TRANSACTION_END_TS,\n\t\t\t'JOB_NAME', '{{ var('kiwi_job_name') }}',\n\t\t\t'REASON_CD', '{{ var('kiwi_trans_payment_reason_cd')}}' ,\n\t\t\t'RECORD_DELETED_FLAG', 'N',\n\t\t\t'RECORD_ID', MD5(CONCAT(SRC.TRANSACTION_ID, SRC.PAYMENT_SEQUENCE_NUMBER)),\n\t\t\t'DQ_AUDIT' , SRC.DQ_AUDIT\n\t\t\t)) AS TECHNICAL_METADATA \n   FROM  {{ ref('raw_osts_trans_payment')}}   SRC\n  WHERE NOT EXISTS (SELECT 1 \n                      FROM ADW_RDV.SALE_TRANSACTION_PAYMENT_STSSLS_LINK DEST\n\t\t\t\t\t WHERE DEST.TRANSACTION_ID = SRC.TRANSACTION_ID\n\t\t\t\t\t   AND DEST.STORE_NK1 = SRC.STORE_ID   \n\t\t\t\t\t   AND DEST.PAYMENT_SEQUENCE_NUMBER = SRC.PAYMENT_SEQUENCE_NUMBER \n\t\t\t\t\t   AND DEST.CURRENCY_NK1 = SRC.CURRENCY \n\t\t\t\t\t   AND DEST.SOURCE_SYSTEM_CD = '{{ var('kiwi_source_system_cd')}}' \n\t\t\t\t\t   AND DEST.REASON_CD = '{{ var('kiwi_trans_payment_reason_cd')}}'  \n                    )", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.raw_osts_trans_payment"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "sale_transaction_payment_stssls_link_v"], "unique_id": "model.kiwi_dbt.sale_transaction_payment_stssls_link_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\sale_transaction_payment_stssls_link_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\sale_transaction_payment_stssls_link_v.sql", "name": "sale_transaction_payment_stssls_link_v", "alias": "sale_transaction_payment_stssls_link_v", "checksum": {"name": "sha256", "checksum": "0be90cb5e830bd5ecbe3a52783555ca5159fa55968110ca5bd16a00b83b7d2d5"}, "tags": ["KIWI_RDV"], "refs": [["raw_osts_trans_payment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.sale_transaction_tender_reward_br_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV'],\n        schema='ADW_SALES_TRAN', \n    )\n}}\n\n\nSELECT SRC.STORE_NK1                                            AS STORE_NK1\n      , SRC.TRANSACTION_ID                                      AS TRANSACTION_ID\n      , SRC.ITEM_SEQUENCE_NUMBER                                AS ITEM_SEQUENCE_NUMBER\n      , SRC.TENDER_REWARD_SEQUENCE_NUMBER                       AS TENDER_REWARD_SEQUENCE_NUMBER\n      , SRC.TRANSACTION_END_TS                                  AS TRANSACTION_END_TS\n      , STRTOK(SRC.PRIMARY_ENTITY_ID, '.', 2)                   AS TRADING_ENTITY_CD\n      , SRC.ITEM_NK1                                            AS ITEM_NK1\n      , CASE\n            WHEN SRC.TENDER_TYPE_ID = 18\n            THEN 'Colleague Discount'\n            WHEN (SRC.TENDER_TYPE_ID IN ('4','5')) AND (SRC.COUPON_VALUE_TYPE = 'Marketing Discount Product or Basket') AND (SRC.COUPON_REDEMPTION_TYPE IN ('1. Item Quantity','3. Value of Qualifying Items'))\n            THEN 'Marketing Voucher Product Level'\n            WHEN (SRC.TENDER_TYPE_ID IN ('4','5')) AND (SRC.COUPON_VALUE_TYPE = 'Marketing Discount Product or Basket') AND (SRC.COUPON_REDEMPTION_TYPE = '5. Basket Value')\n            THEN 'Marketing Voucher Basket Level'\n            WHEN (SRC.TENDER_TYPE_ID IN ('4','5')) AND (SRC.COUPON_VALUE_TYPE <> 'Marketing Discount Product or Basket' OR SRC.COUPON_VALUE_TYPE IS NULL)\n            THEN 'Tender'\n            ELSE 'Unknown'\n          END                                                  AS PROMOTION_TENDER_REWARD_TYPE\n      , FLOOR(SRC.PROMOTION_NK1)                               AS PROMOTION_ID  \n      , SRC.COUPON_NK1                                         AS COUPON_NK1\n      , SRC.REWARD_AMOUNT                                      AS REWARD_AMOUNT\n      , SRC.REWARD_TYPE                                        AS REWARD_TYPE\n      , TO_VARIANT(OBJECT_CONSTRUCT\n        (\n         'BATCH_ID', {{ var('kiwi_current_load_time')}}   ,\n         'EFFECTIVE_FROM', {{ var('kiwi_current_load_time')}} ,\n         'JOB_NAME', 'RDV_sale_transaction_to_BDV_sale_transaction_tender_reward_br',\n         'LOAD_TS', {{ var('kiwi_current_load_time')}} \n        )\n              )                                                AS TECHNICAL_METADATA\n    FROM (SELECT SALE_TEND.STORE_NK1, \n                 SALE_TEND.STORE_NK2, \n                 SALE_TEND.STORE_NK3, \n                 SALE_HEAD.TRANSACTION_ID, \n                 ITEM_SEQUENCE_NUMBER, \n                 TENDER_REWARD_SEQUENCE_NUMBER,\n                 TRANSACTION_END_TS,\n                 PRIMARY_ENTITY_ID, \n                 ITEM_NK1, \n                 TENDER_TYPE_ID,\n\t\t\t     PROMOTION_NK1, \n                 SALE_TEND.COUPON_NK1,\n                 SALE_TEND.COUPON_NK2, \n                 SALE_TEND.COUPON_NK3, \n                 REWARD_AMOUNT, \n                 REWARD_TYPE, \n                 OCC_BAR.COUPON_VALUE_TYPE, \n                 OCC_BAR.COUPON_REDEMPTION_TYPE, \n                 OCC_BAR.COUPON_START_DT \n            FROM ADW_RDV.SALE_TRANSACTION_TENDER_REWARD_STSSLS_LINK SALE_TEND\n\t\t   INNER JOIN ADW_RDV.SALE_TRANSACTION_HEADER_STSSLS_LINK SALE_HEAD \n              ON SALE_TEND.STORE_NK1 = SALE_HEAD.STORE_NK1 \n             AND SALE_TEND.STORE_NK2 = SALE_HEAD.STORE_NK2 \n             AND SALE_TEND.STORE_NK3 = SALE_HEAD.STORE_NK3 \n             AND SALE_TEND.TRANSACTION_ID = SALE_HEAD.TRANSACTION_ID\n\t\t   LEFT JOIN (SELECT COUPON_NK1,\n                             COUPON_NK2,\n                             COUPON_NK3,\n                             COUPON_VALUE_TYPE, \n                             COUPON_REDEMPTION_TYPE, \n                             COUPON_START_DT, \n                             row_number() over(partition by COUPON_NK1 order by COUPON_START_DT) AS seq_num \n                        FROM ADW_BDV.OCC_BARCODE_CLASSIFICATION_BR) OCC_BAR \n              ON SALE_TEND.COUPON_NK1 = OCC_BAR.COUPON_NK1 \n             AND SALE_TEND.COUPON_NK2 = OCC_BAR.COUPON_NK2 \n             AND SALE_TEND.COUPON_NK3 = OCC_BAR.COUPON_NK3\n\t\t     AND OCC_BAR.seq_num = 1) SRC\n  WHERE NOT EXISTS (SELECT 1 \n                      FROM ADW_BDV.SALE_TRANSACTION_TENDER_REWARD_BR DEST\n                     WHERE DEST.TRANSACTION_ID = SRC.TRANSACTION_ID \n                       AND DEST.ITEM_SEQUENCE_NUMBER = SRC.ITEM_SEQUENCE_NUMBER \n                       AND DEST.TENDER_REWARD_SEQUENCE_NUMBER = SRC.TENDER_REWARD_SEQUENCE_NUMBER)", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "sale_transaction_tender_reward_br_v"], "unique_id": "model.kiwi_dbt.sale_transaction_tender_reward_br_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\sale_transaction_tender_reward_br_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\sale_transaction_tender_reward_br_v.sql", "name": "sale_transaction_tender_reward_br_v", "alias": "sale_transaction_tender_reward_br_v", "checksum": {"name": "sha256", "checksum": "b0ccf3c6530d08e315fb2c7fda287aab55a749b65f164fb4d306d60142e49212"}, "tags": ["KIWI_RDV"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "model.kiwi_dbt.sts_rdv_sale_transaction_v": {"raw_sql": "{{\n    config(\n        materialized='view',\n        tags=['KIWI_RDV','KIWI_TESTS'],\n        schema='ADW_SALES_TRAN', \n\t\t    \n\t\t\n    )\n}}\n\n\n\n\n\tSELECT\n\t\t ANY_VALUE(LOAD_TS) AS LOAD_TS\n         ,RECORD_CONTENT:StoreID AS STORE_ID\n \t\t ,ANY_VALUE(RECORD_CONTENT:StsTransactionID) AS TRANSACTION_ID\n \t\t ,ANY_VALUE(RECORD_CONTENT:Tenders) AS TENDERS\n \t\t ,ANY_VALUE(DATEADD(MS, RECORD_CONTENT:EndDateTime, '1970-01-01'))::timestamp_ntz AS TRANSACTION_END_TS\n \t\t ,ANY_VALUE(RECORD_CONTENT:Source) AS TRANSACTION_PROVIDER_NAME\n \t\t ,ANY_VALUE(RECORD_CONTENT:TransactionStatus) AS TRANSACTION_STATUS\n \t\t ,ANY_VALUE(RECORD_CONTENT:Totals:TransactionGrossAmount:Amount) AS GROSS_AMOUNT\n \t\t ,ANY_VALUE(RECORD_CONTENT:Totals:TransactionNetAmount:Amount) AS NET_AMOUNT\n \t\t ,ANY_VALUE(RECORD_CONTENT:Totals:TransactionTotalSavings:Amount) AS TOTAL_SAVINGS_AMOUNT\n \t\t ,ANY_VALUE(RECORD_CONTENT:Totals:TransactionPurchaseQuantity) AS PURCHASE_QUANTITY\n \t\t ,RECORD_CONTENT:PrimaryEntityID AS PRIMARY_ENTITY_ID\n         ,RECORD_METADATA:headers:STS_HEADERS:r10TransactionId AS R10_TRANSACTION_ID\n \t\t ,ANY_VALUE(RECORD_CONTENT:Items) AS ITEMS\n \t\t ,ANY_VALUE(RECORD_CONTENT:SalesChannel:Name) AS SALES_CHANNEL_NAME\n \t\t ,ANY_VALUE(RECORD_CONTENT:OrderNumber) AS ORDER_NUMBER\n \t\t ,ANY_VALUE(RECORD_CONTENT:TransactionLinks) AS TRANSACTION_LINKS\n \t\t ,ANY_VALUE(RECORD_CONTENT:Coupons) AS Coupons\n \t\t ,SUBSTR(ARRAY_TO_STRING(ANY_VALUE(RECORD_CONTENT:DataQuality.list)::ARRAY, ','),1,5000) AS DQ_AUDIT\n \tFROM {{source('ADW_STAGE', 'STREAM_STS_RDV_SALE_TRANSACTION')}} STREAM_STS_RDV_SALE_TRANSACTION\n    WHERE METADATA$ACTION = 'INSERT'\n\tGROUP BY PRIMARY_ENTITY_ID, R10_TRANSACTION_ID, STORE_ID", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.kiwi_dbt.ADW_STAGE.STREAM_STS_RDV_SALE_TRANSACTION"]}, "config": {"enabled": true, "alias": null, "schema": "ADW_SALES_TRAN", "database": null, "tags": ["KIWI_RDV", "KIWI_TESTS"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "post-hook": [], "pre-hook": []}, "database": "ETL_COMPARISON", "schema": "ADW_SALES_TRAN", "fqn": ["kiwi_dbt", "KIWI", "TRANSFORM_VIEWS", "RDV", "sts_rdv_sale_transaction_v"], "unique_id": "model.kiwi_dbt.sts_rdv_sale_transaction_v", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "KIWI\\TRANSFORM_VIEWS\\RDV\\sts_rdv_sale_transaction_v.sql", "original_file_path": "models\\KIWI\\TRANSFORM_VIEWS\\RDV\\sts_rdv_sale_transaction_v.sql", "name": "sts_rdv_sale_transaction_v", "alias": "sts_rdv_sale_transaction_v", "checksum": {"name": "sha256", "checksum": "9df897f35ca86d63691a5dea4c66e583608b23428370d2c51524e821d790c02f"}, "tags": ["KIWI_RDV", "KIWI_TESTS"], "refs": [], "sources": [["ADW_STAGE", "STREAM_STS_RDV_SALE_TRANSACTION"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_warehouse": "ADW_2XLARGE_ADHOC_WH", "materialized": "view", "tags": ["KIWI_RDV", "KIWI_TESTS"], "schema": "ADW_SALES_TRAN"}, "created_at": 1667990044}, "test.kiwi_dbt.assert_sql_test_1_comp_of_aspire_data": {"raw_sql": "{{ config(tags = ['kiwi_deployment_tests']) }}\n\n\n\n\nselect eod_trans_date,eod_store_nk,stage_trans_date,stage_store_nk,eod_count,stage_count,variance from\n(\nselect\n   eod.transaction_end_ts as eod_trans_date,\n   eod.store_nk as eod_store_nk,\n   stage.transaction_end_ts as stage_trans_date,\n   stage.store_nk as stage_store_nk,\n   eod.eod_count,\n   stage.stage_count,\n   abs((ifnull(eod.eod_count, 0) - ifnull(stage.stage_count, 0))) as variance\nfrom\n(select\n        transaction_end_ts,store_nk,count(*) as eod_count\n      from\n         (\n            select\n               to_date\n               (case\n                  when\n                     Transaction.value:EndDateTimestamp is null\n                  then\n                     root:EODTransactionsResponse:EODTransactionsList:Transaction:EndDateTimestamp::timestamp\n                  else\n                     Transaction.value:EndDateTimestamp::timestamp\n               end)\n               as transaction_end_ts,\n               case\n                  when\n                     Transaction.value:Sequence is null\n                  then\n                     root:EODTransactionsResponse:EODTransactionsList:Transaction:Sequence::text\n                  else\n                     Transaction.value:Sequence::text\n               end\n               as trans_sequence,\n               case\n                  when\n                     Transaction.value:SequenceNumber is null\n                  then\n                     root:EODTransactionsResponse:EODTransactionsList:Transaction:SequenceNumber::text\n                  else\n                     Transaction.value:SequenceNumber::text\n               end\n               as trans_sequence_number,\n               case\n                  when\n                     Transaction.value:StoreNumber is null\n                  then\n                     root:EODTransactionsResponse:EODTransactionsList:Transaction:StoreNumber::text\n                  else\n                     Transaction.value:StoreNumber::text\n               end\n               as store_nk,\n               case\n                  when\n                     Transaction.value:WorkstationID is null\n                  then\n                     root:EODTransactionsResponse:EODTransactionsList:Transaction:WorkstationID::text\n                  else\n                     Transaction.value:WorkstationID::text\n               end\n               as trans_workstation_id\n            from\n               ADW_STAGE.EOD_RECONCILE , lateral flatten(root:EODTransactionsResponse:EODTransactionsList:Transaction , outer => True) Transaction\n           group by 1,2,3,4,5\n         )eod_intm\ngroup by transaction_end_ts,store_nk\n)eod\n\nfull outer join\n\n(select transaction_end_ts,store_nk,count(*) as stage_count\n               from\n                  (\n                     select\n                        to_date(DATEADD(MS, RECORD_CONTENT:EndDateTime, '1970-01-01')::timestamp_ntz) AS transaction_end_ts,\n                        record_content:StoreID::text as store_nk,\n                        record_content:PrimaryEntityID as primary_entity_id,\n                        record_metadata:headers:STS_HEADERS:r10TransactionId AS r10_transaction_id,\n                        primary_entity_id || r10_transaction_id as unique_trans_key\n                     from\n                        ADW_STAGE.OSTS_RAW_SALES_TRAN_STAGE_NEW\n                     group by 1,2,3,4,5\n                  )stg_intm\n               group by\n                  transaction_end_ts,\n                  store_nk\n ) stage\non eod.transaction_end_ts = stage.transaction_end_ts\nAND eod.store_nk = stage.store_nk\n) final_diff\nwhere variance <> 0", "resource_type": "test", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["kiwi_deployment_tests"], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETL_COMPARISON", "schema": "dbt_test__audit", "fqn": ["kiwi_dbt", "data_test", "assert_sql_test_1_comp_of_aspire_data"], "unique_id": "test.kiwi_dbt.assert_sql_test_1_comp_of_aspire_data", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "data_test\\assert_sql_test_1_comp_of_aspire_data.sql", "original_file_path": "tests\\assert_sql_test_1_comp_of_aspire_data.sql", "name": "assert_sql_test_1_comp_of_aspire_data", "alias": "assert_sql_test_1_comp_of_aspire_data", "checksum": {"name": "sha256", "checksum": "54b4a1afd21e7f0ddb7b2517baf62cd52c2df00d5fe7629f89ec638545296a94"}, "tags": ["kiwi_deployment_tests", "data"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"tags": ["kiwi_deployment_tests"]}, "created_at": 1667990044}, "test.kiwi_dbt.assert_test_osts_raw_sales_tran_transformed_stage": {"raw_sql": "{{ config(tags = ['kiwi_tests']) }}\n\nSELECT *\n FROM (\n       SELECT SUM(CASE WHEN PRIMARY_ENTITY_ID =  'com.sainsburys.r10.6297712002141600110722122417'  THEN 1 ELSE 0 END ) \n     + SUM(CASE WHEN PRIMARY_ENTITY_ID =  'com.sainsburys.r10.6290726144007600080622123415'  THEN 1 ELSE 0 END ) AS PR_EN_CNT\n  FROM {{ref('osts_raw_sales_tran_transformed_stage')}} OSTS_RAW_SALES_TRAN_TRANSFORMED_STAGE\n WHERE  PRIMARY_ENTITY_ID IN  ('com.sainsburys.r10.6297712002141600110722122417', 'com.sainsburys.r10.6290726144007600080622123415')\n      \n      )\nWHERE PR_EN_CNT > 2", "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.kiwi_dbt.osts_raw_sales_tran_transformed_stage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["kiwi_tests"], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETL_COMPARISON", "schema": "dbt_test__audit", "fqn": ["kiwi_dbt", "data_test", "assert_test_osts_raw_sales_tran_transformed_stage"], "unique_id": "test.kiwi_dbt.assert_test_osts_raw_sales_tran_transformed_stage", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "data_test\\assert_test_osts_raw_sales_tran_transformed_stage.sql", "original_file_path": "tests\\assert_test_osts_raw_sales_tran_transformed_stage.sql", "name": "assert_test_osts_raw_sales_tran_transformed_stage", "alias": "assert_test_osts_raw_sales_tran_transformed_stage", "checksum": {"name": "sha256", "checksum": "68b726c276faa6371474dc5dcd64ed18d8f52ba5a13ba353ea406301dec83289"}, "tags": ["kiwi_tests", "data"], "refs": [["osts_raw_sales_tran_transformed_stage"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"tags": ["kiwi_tests"]}, "created_at": 1667990044}, "test.kiwi_dbt.assert_test_raw_osts_trans_coupon": {"raw_sql": "{{ config(tags = ['kiwi_tests']) }}\n\n\nselect CNT\n   FROM (\n          SELECT COUNT(*) CNT \n            FROM ADW_TEMP.raw_osts_trans_coupon\n           WHERE STORE_ID = 7729 \n             AND TRANSACTION_ID = '29229f61-9f1e-468b-abec-9ac8decf8e4e' \n             AND TRANSACTION_END_TS = '2022-07-07 15:19:14.684' \n             AND PRIMARY_ENTITY_ID = 'com.sainsburys.r10.+ str(uuid4().int)' \n             AND BARCODE_NUMBER = '9916020030259' \n             AND PROMOTION_DESCRIPTION = 'General Promotion' \n             AND PROMOTION_ID = '999899.636844401874459692' \n             AND REWARD_TYPE = 'Monetary'\n        )\n  WHERE CNT < 1 OR CNT > 1", "resource_type": "test", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["kiwi_tests"], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETL_COMPARISON", "schema": "dbt_test__audit", "fqn": ["kiwi_dbt", "data_test", "assert_test_raw_osts_trans_coupon"], "unique_id": "test.kiwi_dbt.assert_test_raw_osts_trans_coupon", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "data_test\\assert_test_raw_osts_trans_coupon.sql", "original_file_path": "tests\\assert_test_raw_osts_trans_coupon.sql", "name": "assert_test_raw_osts_trans_coupon", "alias": "assert_test_raw_osts_trans_coupon", "checksum": {"name": "sha256", "checksum": "cf918dfae88709bc6a66d4e5b54d6d92d8c7f8c7632023560b81f6546685e81e"}, "tags": ["kiwi_tests", "data"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"tags": ["kiwi_tests"]}, "created_at": 1667990044}}, "sources": {"source.kiwi_dbt.ADW_RDV.SALE_TRANS_PROMOTION_STSSLS_SAT": {"fqn": ["kiwi_dbt", "ADW_RDV", "SALE_TRANS_PROMOTION_STSSLS_SAT"], "database": "ETL_COMPARISON", "schema": "ADW_RDV", "unique_id": "source.kiwi_dbt.ADW_RDV.SALE_TRANS_PROMOTION_STSSLS_SAT", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "SALE_TRANS_PROMOTION_STSSLS_SAT", "source_name": "ADW_RDV", "source_description": "", "loader": "", "identifier": "SALE_TRANS_PROMOTION_STSSLS_SAT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["KIWI_BDV"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETL_COMPARISON.ADW_RDV.SALE_TRANS_PROMOTION_STSSLS_SAT", "created_at": 1667990044}, "source.kiwi_dbt.ADW_RDV.COUPON_OCCDTL_SAT": {"fqn": ["kiwi_dbt", "ADW_RDV", "COUPON_OCCDTL_SAT"], "database": "ETL_COMPARISON", "schema": "ADW_RDV", "unique_id": "source.kiwi_dbt.ADW_RDV.COUPON_OCCDTL_SAT", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "COUPON_OCCDTL_SAT", "source_name": "ADW_RDV", "source_description": "", "loader": "", "identifier": "COUPON_OCCDTL_SAT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["KIWI_BDV"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETL_COMPARISON.ADW_RDV.COUPON_OCCDTL_SAT", "created_at": 1667990044}, "source.kiwi_dbt.ADW_RDV.SALE_TRANSACTION_EXCLUDED_SUB_CATS_REF": {"fqn": ["kiwi_dbt", "ADW_RDV", "SALE_TRANSACTION_EXCLUDED_SUB_CATS_REF"], "database": "ETL_COMPARISON", "schema": "ADW_RDV", "unique_id": "source.kiwi_dbt.ADW_RDV.SALE_TRANSACTION_EXCLUDED_SUB_CATS_REF", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "SALE_TRANSACTION_EXCLUDED_SUB_CATS_REF", "source_name": "ADW_RDV", "source_description": "", "loader": "", "identifier": "SALE_TRANSACTION_EXCLUDED_SUB_CATS_REF", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["KIWI_BDV"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETL_COMPARISON.ADW_RDV.SALE_TRANSACTION_EXCLUDED_SUB_CATS_REF", "created_at": 1667990044}, "source.kiwi_dbt.ADW_TEMP.RAW_OSTS_TRANS_TMP": {"fqn": ["kiwi_dbt", "ADW_TEMP", "RAW_OSTS_TRANS_TMP"], "database": "ETL_COMPARISON", "schema": "ADW_TEMP", "unique_id": "source.kiwi_dbt.ADW_TEMP.RAW_OSTS_TRANS_TMP", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "RAW_OSTS_TRANS_TMP", "source_name": "ADW_TEMP", "source_description": "", "loader": "", "identifier": "RAW_OSTS_TRANS_TMP", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["KIWI_RDV"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETL_COMPARISON.ADW_TEMP.RAW_OSTS_TRANS_TMP", "created_at": 1667990044}, "source.kiwi_dbt.ADW_STAGE.OSTS_RAW_SALES_TRAN_STAGE_NEW": {"fqn": ["kiwi_dbt", "ADW_STAGE", "OSTS_RAW_SALES_TRAN_STAGE_NEW"], "database": "ETL_COMPARISON", "schema": "ADW_STAGE", "unique_id": "source.kiwi_dbt.ADW_STAGE.OSTS_RAW_SALES_TRAN_STAGE_NEW", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "OSTS_RAW_SALES_TRAN_STAGE_NEW", "source_name": "ADW_STAGE", "source_description": "", "loader": "", "identifier": "OSTS_RAW_SALES_TRAN_STAGE_NEW", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["KIWI_RDV"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETL_COMPARISON.ADW_STAGE.OSTS_RAW_SALES_TRAN_STAGE_NEW", "created_at": 1667990044}, "source.kiwi_dbt.ADW_STAGE.STREAM_STS_RDV_SALE_TRANSACTION": {"fqn": ["kiwi_dbt", "ADW_STAGE", "STREAM_STS_RDV_SALE_TRANSACTION"], "database": "ETL_COMPARISON", "schema": "ADW_STAGE", "unique_id": "source.kiwi_dbt.ADW_STAGE.STREAM_STS_RDV_SALE_TRANSACTION", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "STREAM_STS_RDV_SALE_TRANSACTION", "source_name": "ADW_STAGE", "source_description": "", "loader": "", "identifier": "STREAM_STS_RDV_SALE_TRANSACTION", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["KIWI_RDV", "KIWI_TESTS"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETL_COMPARISON.ADW_STAGE.STREAM_STS_RDV_SALE_TRANSACTION", "created_at": 1667990044}, "source.kiwi_dbt.ADW_PRODUCT_TRAN.FINANCE_OCCDTL_VW": {"fqn": ["kiwi_dbt", "ADW_PRODUCT_TRAN", "FINANCE_OCCDTL_VW"], "database": "ETL_COMPARISON", "schema": "ADW_PRODUCT_TRAN", "unique_id": "source.kiwi_dbt.ADW_PRODUCT_TRAN.FINANCE_OCCDTL_VW", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "FINANCE_OCCDTL_VW", "source_name": "ADW_PRODUCT_TRAN", "source_description": "", "loader": "", "identifier": "FINANCE_OCCDTL_VW", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["KIWI_RDV"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETL_COMPARISON.ADW_PRODUCT_TRAN.FINANCE_OCCDTL_VW", "created_at": 1667990044}, "source.kiwi_dbt.ADW_BDV.ITEM_STORE_PRICE_BR": {"fqn": ["kiwi_dbt", "ADW_BDV", "ITEM_STORE_PRICE_BR"], "database": "ETL_COMPARISON", "schema": "ADW_BDV", "unique_id": "source.kiwi_dbt.ADW_BDV.ITEM_STORE_PRICE_BR", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "ITEM_STORE_PRICE_BR", "source_name": "ADW_BDV", "source_description": "", "loader": "", "identifier": "ITEM_STORE_PRICE_BR", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["KIWI_RDV"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETL_COMPARISON.ADW_BDV.ITEM_STORE_PRICE_BR", "created_at": 1667990044}, "source.kiwi_dbt.ADW_BDV.PROMOTION_REP": {"fqn": ["kiwi_dbt", "ADW_BDV", "PROMOTION_REP"], "database": "ETL_COMPARISON", "schema": "ADW_BDV", "unique_id": "source.kiwi_dbt.ADW_BDV.PROMOTION_REP", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "PROMOTION_REP", "source_name": "ADW_BDV", "source_description": "", "loader": "", "identifier": "PROMOTION_REP", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["KIWI_BDV"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETL_COMPARISON.ADW_BDV.PROMOTION_REP", "created_at": 1667990044}, "source.kiwi_dbt.ADW_BDV.TENDER_REWARD_TYPE_REP": {"fqn": ["kiwi_dbt", "ADW_BDV", "TENDER_REWARD_TYPE_REP"], "database": "ETL_COMPARISON", "schema": "ADW_BDV", "unique_id": "source.kiwi_dbt.ADW_BDV.TENDER_REWARD_TYPE_REP", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "TENDER_REWARD_TYPE_REP", "source_name": "ADW_BDV", "source_description": "", "loader": "", "identifier": "TENDER_REWARD_TYPE_REP", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["KIWI_BDV"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETL_COMPARISON.ADW_BDV.TENDER_REWARD_TYPE_REP", "created_at": 1667990044}, "source.kiwi_dbt.ADW_BDV.TENDER_TYPE_REP": {"fqn": ["kiwi_dbt", "ADW_BDV", "TENDER_TYPE_REP"], "database": "ETL_COMPARISON", "schema": "ADW_BDV", "unique_id": "source.kiwi_dbt.ADW_BDV.TENDER_TYPE_REP", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "TENDER_TYPE_REP", "source_name": "ADW_BDV", "source_description": "", "loader": "", "identifier": "TENDER_TYPE_REP", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["KIWI_BDV"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETL_COMPARISON.ADW_BDV.TENDER_TYPE_REP", "created_at": 1667990044}, "source.kiwi_dbt.ADW_BDV.ITEM_BR": {"fqn": ["kiwi_dbt", "ADW_BDV", "ITEM_BR"], "database": "ETL_COMPARISON", "schema": "ADW_BDV", "unique_id": "source.kiwi_dbt.ADW_BDV.ITEM_BR", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "ITEM_BR", "source_name": "ADW_BDV", "source_description": "", "loader": "", "identifier": "ITEM_BR", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["KIWI_BDV"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETL_COMPARISON.ADW_BDV.ITEM_BR", "created_at": 1667990044}, "source.kiwi_dbt.ADW_BDV.DIM_ITEM_BR": {"fqn": ["kiwi_dbt", "ADW_BDV", "DIM_ITEM_BR"], "database": "ETL_COMPARISON", "schema": "ADW_BDV", "unique_id": "source.kiwi_dbt.ADW_BDV.DIM_ITEM_BR", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "DIM_ITEM_BR", "source_name": "ADW_BDV", "source_description": "", "loader": "", "identifier": "DIM_ITEM_BR", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["KIWI_BDV"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETL_COMPARISON.ADW_BDV.DIM_ITEM_BR", "created_at": 1667990044}, "source.kiwi_dbt.ADW_DEV_ADW_SALES_PL.DIM_TENDER_REWARD_TYPE": {"fqn": ["kiwi_dbt", "ADW_DEV_ADW_SALES_PL", "DIM_TENDER_REWARD_TYPE"], "database": "ADW_DEV", "schema": "ADW_SALES_PL", "unique_id": "source.kiwi_dbt.ADW_DEV_ADW_SALES_PL.DIM_TENDER_REWARD_TYPE", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "DIM_TENDER_REWARD_TYPE", "source_name": "ADW_DEV_ADW_SALES_PL", "source_description": "", "loader": "", "identifier": "DIM_TENDER_REWARD_TYPE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["KIWI_PL"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ADW_DEV.ADW_SALES_PL.DIM_TENDER_REWARD_TYPE", "created_at": 1667990044}, "source.kiwi_dbt.ADW_DEV_ADW_REFERENCE_PL.DIM_OPERATING_COMPANY": {"fqn": ["kiwi_dbt", "ADW_DEV_ADW_REFERENCE_PL", "DIM_OPERATING_COMPANY"], "database": "ADW_DEV", "schema": "ADW_REFERENCE_PL", "unique_id": "source.kiwi_dbt.ADW_DEV_ADW_REFERENCE_PL.DIM_OPERATING_COMPANY", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "DIM_OPERATING_COMPANY", "source_name": "ADW_DEV_ADW_REFERENCE_PL", "source_description": "", "loader": "", "identifier": "DIM_OPERATING_COMPANY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["KIWI_PL"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ADW_DEV.ADW_REFERENCE_PL.DIM_OPERATING_COMPANY", "created_at": 1667990044}, "source.kiwi_dbt.ADW_REFERENCE_PL.DIM_OPERATING_COMPANY": {"fqn": ["kiwi_dbt", "ADW_REFERENCE_PL", "DIM_OPERATING_COMPANY"], "database": "ADW_DEV", "schema": "ADW_REFERENCE_PL", "unique_id": "source.kiwi_dbt.ADW_REFERENCE_PL.DIM_OPERATING_COMPANY", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "models\\schema.yml", "original_file_path": "models\\schema.yml", "name": "DIM_OPERATING_COMPANY", "source_name": "ADW_REFERENCE_PL", "source_description": "", "loader": "", "identifier": "DIM_OPERATING_COMPANY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["KIWI_PL"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ADW_DEV.ADW_REFERENCE_PL.DIM_OPERATING_COMPANY", "created_at": 1667990044}}, "macros": {"macro.kiwi_dbt.create_or_replace_view": {"unique_id": "macro.kiwi_dbt.create_or_replace_view", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "macros\\create_or_replace_view.sql", "original_file_path": "macros\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n    --added by Fizlar Neysham 27/07/21\n    {% if execute %}\n    {{ log (\"Calling Barbossa - Object Copy Grants & Masking Policies\", info=true)}} \n    {% set results = run_query(\"call BARBOSSA.OBJECTS.COPY_GRANTS_MASKINGPOLICIES(CURRENT_ROLE() , CURRENT_DATABASE(), '\" ~ schema ~\"', '\"~ target_relation ~\"', 'VIEW')\") %}\n    {{ log (\"Fininshed Calling Barbossa - Object Copy Grants & Masking Policies. Output of Proc Call: \"~ results.columns[0].values() , info=true)}} \n    {% endif %} \n    --end by Fizlar Neysham 27/07/21\n   \n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.kiwi_dbt.generate_schema_name": {"unique_id": "macro.kiwi_dbt.generate_schema_name", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n    \n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n    \n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.kiwi_dbt.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.kiwi_dbt.dbt_snowflake_validate_get_incremental_strategy", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "macros\\incremental.sql", "original_file_path": "macros\\incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.kiwi_dbt.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.kiwi_dbt.dbt_snowflake_get_incremental_sql", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "macros\\incremental.sql", "original_file_path": "macros\\incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.kiwi_dbt.materialization_incremental_snowflake": {"unique_id": "macro.kiwi_dbt.materialization_incremental_snowflake", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "macros\\incremental.sql", "original_file_path": "macros\\incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n   \n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n  --added variable by Fizlar Neysham 28/07/21\n  {% set tbl_created =1 %} \n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    --added variable assignment by Fizlar Neysham 28/07/21\n    {% set tbl_created =0 %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n    --added call to macro get sql results as posthook by Fizlar Neysham 28/07/21\n    {{log_sql_results(tbl_created)}}\n        \n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.kiwi_dbt.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.kiwi_dbt.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.kiwi_dbt.log_sql_results", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.kiwi_dbt.log_sql_results": {"unique_id": "macro.kiwi_dbt.log_sql_results", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "macros\\logging_sql_results.sql", "original_file_path": "macros\\logging_sql_results.sql", "name": "log_sql_results", "macro_sql": "\n\n{%- macro log_sql_results(tbl_created) -%}\n       \n    {% set query %}\n\n        {% if tbl_created == 1 %}\n               select last_query_id() \n        {% else %}\n               select LAST_QUERY_ID(-2), * from table(result_scan(LAST_QUERY_ID(-2)))\n        {% endif %}\n    {% endset %}\n\n    {% set results = run_query(query) %}\n    {# execute is a Jinja variable that returns True when dbt is in \"execute\" mode i.e. True when running dbt run but False during dbt compile. #}\n    {% if execute %}\n\n    {% set results_list = results.columns %}\n    {% set col1 = results_list[0].values()[0] %}\n    \n    \n    {% if tbl_created == 1 %}\n       {{ log(\" \" , info=True)}}\n       {{ log(\"Query ID:\" ~ col1 , info=True)}}\n       {{ log(\"Model created table.\", info=True)}} \n       {{ log(\" \" , info=True)}}\n    {% else %}\n        \n        {% set col2 = results_list[1].values()[0] %}\n        {% if results_list|length > 2 %}\n             {% set col3 = results_list[2].values()[0] %}\n        {% else %}\n              {% set col3 = 0 %}\n        {% endif %}      \n        {{ log(\" \" , info=True)}}\n        {{ log(\"Query ID:\" ~ col1  , info=True)}}\n        {{ log(\"The number of rows Inserted:\" ~ col2 ~ \" The Number of rows Updated:\" ~ col3, info=True)}}\n        {{ log(\" \" , info=True)}}\n    {% endif %}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.kiwi_dbt.insert_test_data": {"unique_id": "macro.kiwi_dbt.insert_test_data", "package_name": "kiwi_dbt", "root_path": "C:\\Users\\FizlarNeysha_ezwtus6\\Desktop\\git\\grid-kiwi-sales-snowflake", "path": "macros\\tests.sql", "original_file_path": "macros\\tests.sql", "name": "insert_test_data", "macro_sql": "{% macro insert_test_data (test_id=none) -%}\n\n    {% if execute %}\n        \n        \n        {% set master_test_id %}\n        \n        {%- if test_id is not none -%} \n        {{test_id}} \n        {% else %} '%'  {%- endif -%}\n\n        {% endset %}\n\n        {% set results = run_query(\"SELECT array_to_string(parse_json(TEST_SQL), '#~#!!') x FROM ADW_TEMP.TEST_STATEMENTS WHERE TEST_NUMBER like \" ~ master_test_id ~ ' Order by TEST_NUMBER') %}\n        \n        {% set table_results = results.rows %}\n        {%- for stmts in table_results %}\n            {% set results_list = stmts[0]|string %}\n            {% set inner_results_list = results_list.split('#~#!!') %}\n\n            {%- for stmt in inner_results_list %}\n                {{log (\"SQL stmt runnning:\" ~  stmt, info=true) -}}\n                {% set results = run_query(stmt) %} \n            {% endfor %}\n        {% endfor %}\n\n\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$ {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n    \n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n  \n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n    \n    {% do run_query(sql) %}\n    \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE \n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n  \n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n   \n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.kiwi_dbt.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.kiwi_dbt.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n    \n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.kiwi_dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\core.sql", "original_file_path": "macros\\core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\core.sql", "original_file_path": "macros\\core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if remove_columns | length > 0 }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_alias.sql", "original_file_path": "macros\\etc\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_alias.sql", "original_file_path": "macros\\etc\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_database.sql", "original_file_path": "macros\\etc\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_database.sql", "original_file_path": "macros\\etc\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_schema.sql", "original_file_path": "macros\\etc\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_schema.sql", "original_file_path": "macros\\etc\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_schema.sql", "original_file_path": "macros\\etc\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\is_incremental.sql", "original_file_path": "macros\\etc\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\query.sql", "original_file_path": "macros\\etc\\query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\where_subquery.sql", "original_file_path": "macros\\etc\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\where_subquery.sql", "original_file_path": "macros\\etc\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "name": "materialization_test_default", "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\incremental\\helpers.sql", "original_file_path": "macros\\materializations\\incremental\\helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    \n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\incremental\\on_schema_change.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\incremental\\on_schema_change.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n  \n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change != 'ignore' %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\table\\table.sql", "original_file_path": "macros\\materializations\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\view.sql", "original_file_path": "macros\\materializations\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\accepted_values.sql", "original_file_path": "macros\\schema_tests\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\accepted_values.sql", "original_file_path": "macros\\schema_tests\\accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\not_null.sql", "original_file_path": "macros\\schema_tests\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\not_null.sql", "original_file_path": "macros\\schema_tests\\not_null.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\relationships.sql", "original_file_path": "macros\\schema_tests\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\relationships.sql", "original_file_path": "macros\\schema_tests\\relationships.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\unique.sql", "original_file_path": "macros\\schema_tests\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\unique.sql", "original_file_path": "macros\\schema_tests\\unique.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1667990043}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "c:\\users\\fizlarneysham\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.kiwi_dbt.promotion_rep": ["model.kiwi_dbt.raw_osts_promo_data_v"], "model.kiwi_dbt.sale_transaction_item_base_br": ["model.kiwi_dbt.sale_transaction_item_base_br_v"], "model.kiwi_dbt.sale_transaction_item_discount_br": ["model.kiwi_dbt.sale_transaction_item_discount_br_v"], "model.kiwi_dbt.sale_transaction_payment_br": ["model.kiwi_dbt.sale_transaction_payment_br_v"], "model.kiwi_dbt.sale_transaction_tender_reward_br": ["model.kiwi_dbt.sale_transaction_tender_reward_br_v"], "model.kiwi_dbt.dim_promotion": ["model.kiwi_dbt.dim_promotion_v"], "model.kiwi_dbt.dim_tender_reward_type": ["model.kiwi_dbt.dim_tender_reward_type_v"], "model.kiwi_dbt.dim_tender_type": ["model.kiwi_dbt.dim_tender_type_v"], "model.kiwi_dbt.fact_sale_transaction_item_tender_reward": ["model.kiwi_dbt.fact_sale_transaction_item_tender_reward_v"], "model.kiwi_dbt.fact_sale_transaction_tender": ["model.kiwi_dbt.fact_sale_transaction_tender_v"], "model.kiwi_dbt.sale_transaction_coupon_stssls_link": ["model.kiwi_dbt.raw_osts_trans_coupon_link_v"], "model.kiwi_dbt.sale_transaction_header_stssls_link": ["model.kiwi_dbt.raw_osts_trans_header_v"], "model.kiwi_dbt.sale_transaction_item_price_modifier_stssls_link": ["model.kiwi_dbt.sale_transaction_item_price_modifier_stssls_link_v"], "model.kiwi_dbt.sale_transaction_item_stssls_link": ["model.kiwi_dbt.sale_transaction_item_stssls_link_v"], "model.kiwi_dbt.sale_transaction_link_stssls_link": ["model.kiwi_dbt.sale_transaction_link_stssls_link_v"], "model.kiwi_dbt.sale_transaction_payment_stssls_link": ["model.kiwi_dbt.sale_transaction_payment_stssls_link_v"], "model.kiwi_dbt.sale_transaction_tender_reward_stssls_link": ["model.kiwi_dbt.raw_osts_trans_tender_reward_v"], "model.kiwi_dbt.sale_trans_promotion_hub": ["model.kiwi_dbt.raw_osts_item_promotion_v"], "model.kiwi_dbt.sale_trans_promotion_stssls_sat": ["model.kiwi_dbt.raw_osts_item_promotion_v"], "model.kiwi_dbt.osts_raw_sales_tran_transformed_stage": ["model.kiwi_dbt.raw_osts_trans"], "model.kiwi_dbt.raw_osts_item_price_modifier": ["model.kiwi_dbt.raw_osts_item_price_modifier_v"], "model.kiwi_dbt.raw_osts_item_promo": ["model.kiwi_dbt.raw_osts_item_promo_v"], "model.kiwi_dbt.raw_osts_trans": ["model.kiwi_dbt.raw_osts_trans_v"], "model.kiwi_dbt.raw_osts_trans_coupon": ["model.kiwi_dbt.raw_osts_trans_coupon_v"], "model.kiwi_dbt.raw_osts_trans_item": ["model.kiwi_dbt.raw_osts_trans_item_v"], "model.kiwi_dbt.raw_osts_trans_link": ["model.kiwi_dbt.raw_osts_trans_link_v"], "model.kiwi_dbt.raw_osts_trans_payment": ["model.kiwi_dbt.raw_osts_trans_payment_v"], "model.kiwi_dbt.sts_bdv_item_promotion_tender_rewards_tab": ["model.kiwi_dbt.sts_bdv_item_promotion_tender_rewards_tab_v"], "model.kiwi_dbt.sts_bdv_sale_transaction_item_br": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_v"], "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_base": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_base_v"], "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_rpm": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_rpm_v"], "model.kiwi_dbt.sale_transaction_item_discount_br_v": ["model.kiwi_dbt.raw_osts_item_price_modifier"], "model.kiwi_dbt.sts_bdv_item_promotion_tender_rewards_tab_v": ["model.kiwi_dbt.sale_transaction_tender_reward_br", "source.kiwi_dbt.ADW_BDV.TENDER_REWARD_TYPE_REP"], "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_base_v": ["model.kiwi_dbt.sale_transaction_item_base_br"], "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_rpm_v": ["model.kiwi_dbt.sale_transaction_item_price_modifier_stssls_link"], "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_v": ["model.kiwi_dbt.sale_transaction_header_stssls_link", "model.kiwi_dbt.sts_bdv_item_promotion_tender_rewards_tab", "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_base", "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_rpm", "source.kiwi_dbt.ADW_BDV.DIM_ITEM_BR", "source.kiwi_dbt.ADW_BDV.ITEM_BR", "source.kiwi_dbt.ADW_BDV.ITEM_STORE_PRICE_BR", "source.kiwi_dbt.ADW_RDV.SALE_TRANSACTION_EXCLUDED_SUB_CATS_REF"], "model.kiwi_dbt.dim_promotion_v": ["model.kiwi_dbt.promotion_rep"], "model.kiwi_dbt.dim_tender_reward_type_v": ["source.kiwi_dbt.ADW_BDV.TENDER_REWARD_TYPE_REP"], "model.kiwi_dbt.dim_tender_type_v": ["source.kiwi_dbt.ADW_BDV.TENDER_TYPE_REP"], "model.kiwi_dbt.fact_sale_transaction_item_tender_reward_v": ["source.kiwi_dbt.ADW_DEV_ADW_REFERENCE_PL.DIM_OPERATING_COMPANY", "source.kiwi_dbt.ADW_DEV_ADW_SALES_PL.DIM_TENDER_REWARD_TYPE"], "model.kiwi_dbt.fact_sale_transaction_tender_v": ["model.kiwi_dbt.sale_transaction_payment_br", "source.kiwi_dbt.ADW_REFERENCE_PL.DIM_OPERATING_COMPANY"], "model.kiwi_dbt.raw_osts_item_price_modifier_v": ["model.kiwi_dbt.raw_osts_trans"], "model.kiwi_dbt.raw_osts_item_promotion_v": ["model.kiwi_dbt.raw_osts_trans", "source.kiwi_dbt.ADW_PRODUCT_TRAN.FINANCE_OCCDTL_VW"], "model.kiwi_dbt.raw_osts_item_promo_v": ["model.kiwi_dbt.raw_osts_trans"], "model.kiwi_dbt.raw_osts_promo_data_v": ["source.kiwi_dbt.ADW_BDV.PROMOTION_REP", "source.kiwi_dbt.ADW_BDV.PROMOTION_REP", "source.kiwi_dbt.ADW_RDV.COUPON_OCCDTL_SAT", "source.kiwi_dbt.ADW_RDV.SALE_TRANS_PROMOTION_STSSLS_SAT"], "model.kiwi_dbt.raw_osts_trans_coupon_link_v": ["model.kiwi_dbt.raw_osts_trans_coupon"], "model.kiwi_dbt.raw_osts_trans_coupon_v": ["model.kiwi_dbt.raw_osts_trans"], "model.kiwi_dbt.raw_osts_trans_header_v": ["model.kiwi_dbt.raw_osts_trans"], "model.kiwi_dbt.raw_osts_trans_item_v": ["model.kiwi_dbt.raw_osts_trans"], "model.kiwi_dbt.raw_osts_trans_link_v": ["model.kiwi_dbt.raw_osts_trans"], "model.kiwi_dbt.raw_osts_trans_payment_v": ["model.kiwi_dbt.raw_osts_trans", "model.kiwi_dbt.raw_osts_trans_coupon"], "model.kiwi_dbt.raw_osts_trans_tender_reward_v": ["model.kiwi_dbt.raw_osts_item_promo", "model.kiwi_dbt.raw_osts_trans_payment"], "model.kiwi_dbt.raw_osts_trans_v": ["source.kiwi_dbt.ADW_STAGE.OSTS_RAW_SALES_TRAN_STAGE_NEW"], "model.kiwi_dbt.sale_transaction_item_base_br_v": ["model.kiwi_dbt.raw_osts_trans_item", "model.kiwi_dbt.raw_osts_trans_link", "source.kiwi_dbt.ADW_BDV.ITEM_STORE_PRICE_BR"], "model.kiwi_dbt.sale_transaction_item_price_modifier_stssls_link_v": ["model.kiwi_dbt.raw_osts_item_price_modifier"], "model.kiwi_dbt.sale_transaction_item_stssls_link_v": ["model.kiwi_dbt.raw_osts_trans_item"], "model.kiwi_dbt.sale_transaction_link_stssls_link_v": ["model.kiwi_dbt.raw_osts_trans_link"], "model.kiwi_dbt.sale_transaction_payment_br_v": ["model.kiwi_dbt.raw_osts_trans_payment"], "model.kiwi_dbt.sale_transaction_payment_stssls_link_v": ["model.kiwi_dbt.raw_osts_trans_payment"], "model.kiwi_dbt.sale_transaction_tender_reward_br_v": [], "model.kiwi_dbt.sts_rdv_sale_transaction_v": ["source.kiwi_dbt.ADW_STAGE.STREAM_STS_RDV_SALE_TRANSACTION"], "test.kiwi_dbt.assert_sql_test_1_comp_of_aspire_data": [], "test.kiwi_dbt.assert_test_osts_raw_sales_tran_transformed_stage": ["model.kiwi_dbt.osts_raw_sales_tran_transformed_stage"], "test.kiwi_dbt.assert_test_raw_osts_trans_coupon": [], "source.kiwi_dbt.ADW_RDV.SALE_TRANS_PROMOTION_STSSLS_SAT": [], "source.kiwi_dbt.ADW_RDV.COUPON_OCCDTL_SAT": [], "source.kiwi_dbt.ADW_RDV.SALE_TRANSACTION_EXCLUDED_SUB_CATS_REF": [], "source.kiwi_dbt.ADW_TEMP.RAW_OSTS_TRANS_TMP": [], "source.kiwi_dbt.ADW_STAGE.OSTS_RAW_SALES_TRAN_STAGE_NEW": [], "source.kiwi_dbt.ADW_STAGE.STREAM_STS_RDV_SALE_TRANSACTION": [], "source.kiwi_dbt.ADW_PRODUCT_TRAN.FINANCE_OCCDTL_VW": [], "source.kiwi_dbt.ADW_BDV.ITEM_STORE_PRICE_BR": [], "source.kiwi_dbt.ADW_BDV.PROMOTION_REP": [], "source.kiwi_dbt.ADW_BDV.TENDER_REWARD_TYPE_REP": [], "source.kiwi_dbt.ADW_BDV.TENDER_TYPE_REP": [], "source.kiwi_dbt.ADW_BDV.ITEM_BR": [], "source.kiwi_dbt.ADW_BDV.DIM_ITEM_BR": [], "source.kiwi_dbt.ADW_DEV_ADW_SALES_PL.DIM_TENDER_REWARD_TYPE": [], "source.kiwi_dbt.ADW_DEV_ADW_REFERENCE_PL.DIM_OPERATING_COMPANY": [], "source.kiwi_dbt.ADW_REFERENCE_PL.DIM_OPERATING_COMPANY": []}, "child_map": {"model.kiwi_dbt.promotion_rep": ["model.kiwi_dbt.dim_promotion_v"], "model.kiwi_dbt.sale_transaction_item_base_br": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_base_v"], "model.kiwi_dbt.sale_transaction_item_discount_br": [], "model.kiwi_dbt.sale_transaction_payment_br": ["model.kiwi_dbt.fact_sale_transaction_tender_v"], "model.kiwi_dbt.sale_transaction_tender_reward_br": ["model.kiwi_dbt.sts_bdv_item_promotion_tender_rewards_tab_v"], "model.kiwi_dbt.dim_promotion": [], "model.kiwi_dbt.dim_tender_reward_type": [], "model.kiwi_dbt.dim_tender_type": [], "model.kiwi_dbt.fact_sale_transaction_item_tender_reward": [], "model.kiwi_dbt.fact_sale_transaction_tender": [], "model.kiwi_dbt.sale_transaction_coupon_stssls_link": [], "model.kiwi_dbt.sale_transaction_header_stssls_link": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_v"], "model.kiwi_dbt.sale_transaction_item_price_modifier_stssls_link": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_rpm_v"], "model.kiwi_dbt.sale_transaction_item_stssls_link": [], "model.kiwi_dbt.sale_transaction_link_stssls_link": [], "model.kiwi_dbt.sale_transaction_payment_stssls_link": [], "model.kiwi_dbt.sale_transaction_tender_reward_stssls_link": [], "model.kiwi_dbt.sale_trans_promotion_hub": [], "model.kiwi_dbt.sale_trans_promotion_stssls_sat": [], "model.kiwi_dbt.osts_raw_sales_tran_transformed_stage": ["test.kiwi_dbt.assert_test_osts_raw_sales_tran_transformed_stage"], "model.kiwi_dbt.raw_osts_item_price_modifier": ["model.kiwi_dbt.sale_transaction_item_discount_br_v", "model.kiwi_dbt.sale_transaction_item_price_modifier_stssls_link_v"], "model.kiwi_dbt.raw_osts_item_promo": ["model.kiwi_dbt.raw_osts_trans_tender_reward_v"], "model.kiwi_dbt.raw_osts_trans": ["model.kiwi_dbt.osts_raw_sales_tran_transformed_stage", "model.kiwi_dbt.raw_osts_item_price_modifier_v", "model.kiwi_dbt.raw_osts_item_promo_v", "model.kiwi_dbt.raw_osts_item_promotion_v", "model.kiwi_dbt.raw_osts_trans_coupon_v", "model.kiwi_dbt.raw_osts_trans_header_v", "model.kiwi_dbt.raw_osts_trans_item_v", "model.kiwi_dbt.raw_osts_trans_link_v", "model.kiwi_dbt.raw_osts_trans_payment_v"], "model.kiwi_dbt.raw_osts_trans_coupon": ["model.kiwi_dbt.raw_osts_trans_coupon_link_v", "model.kiwi_dbt.raw_osts_trans_payment_v"], "model.kiwi_dbt.raw_osts_trans_item": ["model.kiwi_dbt.sale_transaction_item_base_br_v", "model.kiwi_dbt.sale_transaction_item_stssls_link_v"], "model.kiwi_dbt.raw_osts_trans_link": ["model.kiwi_dbt.sale_transaction_item_base_br_v", "model.kiwi_dbt.sale_transaction_link_stssls_link_v"], "model.kiwi_dbt.raw_osts_trans_payment": ["model.kiwi_dbt.raw_osts_trans_tender_reward_v", "model.kiwi_dbt.sale_transaction_payment_br_v", "model.kiwi_dbt.sale_transaction_payment_stssls_link_v"], "model.kiwi_dbt.sts_bdv_item_promotion_tender_rewards_tab": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_v"], "model.kiwi_dbt.sts_bdv_sale_transaction_item_br": [], "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_base": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_v"], "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_rpm": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_v"], "model.kiwi_dbt.sale_transaction_item_discount_br_v": ["model.kiwi_dbt.sale_transaction_item_discount_br"], "model.kiwi_dbt.sts_bdv_item_promotion_tender_rewards_tab_v": ["model.kiwi_dbt.sts_bdv_item_promotion_tender_rewards_tab"], "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_base_v": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_base"], "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_rpm_v": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_rpm"], "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_v": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br"], "model.kiwi_dbt.dim_promotion_v": ["model.kiwi_dbt.dim_promotion"], "model.kiwi_dbt.dim_tender_reward_type_v": ["model.kiwi_dbt.dim_tender_reward_type"], "model.kiwi_dbt.dim_tender_type_v": ["model.kiwi_dbt.dim_tender_type"], "model.kiwi_dbt.fact_sale_transaction_item_tender_reward_v": ["model.kiwi_dbt.fact_sale_transaction_item_tender_reward"], "model.kiwi_dbt.fact_sale_transaction_tender_v": ["model.kiwi_dbt.fact_sale_transaction_tender"], "model.kiwi_dbt.raw_osts_item_price_modifier_v": ["model.kiwi_dbt.raw_osts_item_price_modifier"], "model.kiwi_dbt.raw_osts_item_promotion_v": ["model.kiwi_dbt.sale_trans_promotion_hub", "model.kiwi_dbt.sale_trans_promotion_stssls_sat"], "model.kiwi_dbt.raw_osts_item_promo_v": ["model.kiwi_dbt.raw_osts_item_promo"], "model.kiwi_dbt.raw_osts_promo_data_v": ["model.kiwi_dbt.promotion_rep"], "model.kiwi_dbt.raw_osts_trans_coupon_link_v": ["model.kiwi_dbt.sale_transaction_coupon_stssls_link"], "model.kiwi_dbt.raw_osts_trans_coupon_v": ["model.kiwi_dbt.raw_osts_trans_coupon"], "model.kiwi_dbt.raw_osts_trans_header_v": ["model.kiwi_dbt.sale_transaction_header_stssls_link"], "model.kiwi_dbt.raw_osts_trans_item_v": ["model.kiwi_dbt.raw_osts_trans_item"], "model.kiwi_dbt.raw_osts_trans_link_v": ["model.kiwi_dbt.raw_osts_trans_link"], "model.kiwi_dbt.raw_osts_trans_payment_v": ["model.kiwi_dbt.raw_osts_trans_payment"], "model.kiwi_dbt.raw_osts_trans_tender_reward_v": ["model.kiwi_dbt.sale_transaction_tender_reward_stssls_link"], "model.kiwi_dbt.raw_osts_trans_v": ["model.kiwi_dbt.raw_osts_trans"], "model.kiwi_dbt.sale_transaction_item_base_br_v": ["model.kiwi_dbt.sale_transaction_item_base_br"], "model.kiwi_dbt.sale_transaction_item_price_modifier_stssls_link_v": ["model.kiwi_dbt.sale_transaction_item_price_modifier_stssls_link"], "model.kiwi_dbt.sale_transaction_item_stssls_link_v": ["model.kiwi_dbt.sale_transaction_item_stssls_link"], "model.kiwi_dbt.sale_transaction_link_stssls_link_v": ["model.kiwi_dbt.sale_transaction_link_stssls_link"], "model.kiwi_dbt.sale_transaction_payment_br_v": ["model.kiwi_dbt.sale_transaction_payment_br"], "model.kiwi_dbt.sale_transaction_payment_stssls_link_v": ["model.kiwi_dbt.sale_transaction_payment_stssls_link"], "model.kiwi_dbt.sale_transaction_tender_reward_br_v": ["model.kiwi_dbt.sale_transaction_tender_reward_br"], "model.kiwi_dbt.sts_rdv_sale_transaction_v": [], "test.kiwi_dbt.assert_sql_test_1_comp_of_aspire_data": [], "test.kiwi_dbt.assert_test_osts_raw_sales_tran_transformed_stage": [], "test.kiwi_dbt.assert_test_raw_osts_trans_coupon": [], "source.kiwi_dbt.ADW_RDV.SALE_TRANS_PROMOTION_STSSLS_SAT": ["model.kiwi_dbt.raw_osts_promo_data_v"], "source.kiwi_dbt.ADW_RDV.COUPON_OCCDTL_SAT": ["model.kiwi_dbt.raw_osts_promo_data_v"], "source.kiwi_dbt.ADW_RDV.SALE_TRANSACTION_EXCLUDED_SUB_CATS_REF": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_v"], "source.kiwi_dbt.ADW_TEMP.RAW_OSTS_TRANS_TMP": [], "source.kiwi_dbt.ADW_STAGE.OSTS_RAW_SALES_TRAN_STAGE_NEW": ["model.kiwi_dbt.raw_osts_trans_v"], "source.kiwi_dbt.ADW_STAGE.STREAM_STS_RDV_SALE_TRANSACTION": ["model.kiwi_dbt.sts_rdv_sale_transaction_v"], "source.kiwi_dbt.ADW_PRODUCT_TRAN.FINANCE_OCCDTL_VW": ["model.kiwi_dbt.raw_osts_item_promotion_v"], "source.kiwi_dbt.ADW_BDV.ITEM_STORE_PRICE_BR": ["model.kiwi_dbt.sale_transaction_item_base_br_v", "model.kiwi_dbt.sts_bdv_sale_transaction_item_br_v"], "source.kiwi_dbt.ADW_BDV.PROMOTION_REP": ["model.kiwi_dbt.raw_osts_promo_data_v", "model.kiwi_dbt.raw_osts_promo_data_v"], "source.kiwi_dbt.ADW_BDV.TENDER_REWARD_TYPE_REP": ["model.kiwi_dbt.dim_tender_reward_type_v", "model.kiwi_dbt.sts_bdv_item_promotion_tender_rewards_tab_v"], "source.kiwi_dbt.ADW_BDV.TENDER_TYPE_REP": ["model.kiwi_dbt.dim_tender_type_v"], "source.kiwi_dbt.ADW_BDV.ITEM_BR": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_v"], "source.kiwi_dbt.ADW_BDV.DIM_ITEM_BR": ["model.kiwi_dbt.sts_bdv_sale_transaction_item_br_v"], "source.kiwi_dbt.ADW_DEV_ADW_SALES_PL.DIM_TENDER_REWARD_TYPE": ["model.kiwi_dbt.fact_sale_transaction_item_tender_reward_v"], "source.kiwi_dbt.ADW_DEV_ADW_REFERENCE_PL.DIM_OPERATING_COMPANY": ["model.kiwi_dbt.fact_sale_transaction_item_tender_reward_v"], "source.kiwi_dbt.ADW_REFERENCE_PL.DIM_OPERATING_COMPANY": ["model.kiwi_dbt.fact_sale_transaction_tender_v"]}}